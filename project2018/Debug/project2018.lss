
project2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00002408  0000249c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800184  00800184  00002520  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039d1  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001563  00000000  00000000  0000639d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021a3  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  00009aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001107  00000000  00000000  0000a620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002610  00000000  00000000  0000b727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000dd37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__ctors_end>
       4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
       8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
       c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      10:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      14:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_5>
      18:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      1c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      20:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      24:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      2c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      30:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      34:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      38:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      3c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      40:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_16>
      44:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      4c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      50:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_20>
      54:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_21>
      58:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      5c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      60:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_24>
      64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      68:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      6c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      70:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      74:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      78:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      7c:	47 02       	muls	r20, r23
      7e:	fa 01       	movw	r30, r20
      80:	fa 01       	movw	r30, r20
      82:	fa 01       	movw	r30, r20
      84:	47 02       	muls	r20, r23
      86:	1a 02       	muls	r17, r26
      88:	1a 02       	muls	r17, r26
      8a:	3a 02       	muls	r19, r26
      8c:	a5 03       	fmuls	r18, r21
      8e:	a8 03       	fmulsu	r18, r16
      90:	a8 03       	fmulsu	r18, r16
      92:	a8 03       	fmulsu	r18, r16
      94:	a5 03       	fmuls	r18, r21
      96:	ac 03       	fmulsu	r18, r20
      98:	ac 03       	fmulsu	r18, r20
      9a:	b0 03       	fmuls	r19, r16

0000009c <__trampolines_end>:
      9c:	43 75       	andi	r20, 0x53	; 83
      9e:	72 72       	andi	r23, 0x22	; 34
      a0:	65 6e       	ori	r22, 0xE5	; 229
      a2:	74 20       	and	r7, r4
      a4:	53 63       	ori	r21, 0x33	; 51
      a6:	6f 72       	andi	r22, 0x2F	; 47
      a8:	65 20       	and	r6, r5
      aa:	25 69       	ori	r18, 0x95	; 149
	...

000000ad <__c.2371>:
      ad:	43 75 72 72 65 6e 74 20 4c 69 76 65 73 20 25 69     Current Lives %i
	...

000000be <__c.2369>:
      be:	43 75 72 72 65 6e 74 20 4c 65 76 65 6c 20 25 69     Current Level %i
	...

000000cf <__c.2360>:
      cf:	59 6f 75 20 62 65 61 74 20 74 68 65 20 67 61 6d     You beat the gam
      df:	65 21 00                                            e!.

000000e2 <__c.2358>:
      e2:	43 6f 6e 67 72 61 74 75 6c 61 74 69 6f 6e 73 00     Congratulations.

000000f2 <__c.2342>:
      f2:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     102:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000110 <__c.2340>:
     110:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

0000011a <__c.2333>:
     11a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     12a:	20 20 20 00                                            .

0000012e <__c.2331>:
     12e:	50 61 75 73 65 64 2e 2e 2e 20 20 20 20 20 20 20     Paused...       
     13e:	20 20 20 20 20 20 20 20 20 00                                .

00000148 <__c.2309>:
     148:	50 72 6f 6a 65 63 74 20 62 79 20 4d 61 72 63 75     Project by Marcu
     158:	73 20 43 68 61 6e 20 4a 75 6e 20 48 6f 6e 67 20     s Chan Jun Hong 
     168:	34 35 30 35 37 33 37 37 00                          45057377.

00000171 <__c.2307>:
     171:	46 72 6f 67 67 65 72 00                             Frogger.

00000179 <__c.2034>:
     179:	53 63 6f 72 65 3a 20 25 69 00                       Score: %i.

00000183 <numbers>:
     183:	ee 01 eb 01 e7 01 e3 01 df 01 db 01 d7 01 d3 01     ................
     193:	cf 01 cb 01                                         ....

00000197 <letters>:
     197:	5d 02 59 02 55 02 51 02 4d 02 49 02 45 02 41 02     ].Y.U.Q.M.I.E.A.
     1a7:	3e 02 3a 02 36 02 32 02 2d 02 29 02 25 02 21 02     >.:.6.2.-.).%.!.
     1b7:	1c 02 18 02 14 02 0f 02 0b 02 06 02 01 02 fc 01     ................
     1c7:	f7 01 f2 01                                         ....

000001cb <cols_9>:
     1cb:	64 92 92 7d                                         d..}

000001cf <cols_8>:
     1cf:	6c 92 92 6d                                         l..m

000001d3 <cols_7>:
     1d3:	80 9e a0 c1                                         ....

000001d7 <cols_6>:
     1d7:	7c 92 92 4d                                         |..M

000001db <cols_5>:
     1db:	e4 a2 a2 9d                                         ....

000001df <cols_4>:
     1df:	18 28 48 ff                                         .(H.

000001e3 <cols_3>:
     1e3:	44 92 92 6d                                         D..m

000001e7 <cols_2>:
     1e7:	46 8a 92 63                                         F..c

000001eb <cols_1>:
     1eb:	42 fe 03                                            B..

000001ee <cols_0>:
     1ee:	7c 92 a2 7d                                         |..}

000001f2 <cols_Z>:
     1f2:	86 8a 92 a2 c3                                      .....

000001f7 <cols_Y>:
     1f7:	e0 10 0e 10 e1                                      .....

000001fc <cols_X>:
     1fc:	c6 28 10 28 c7                                      .(.(.

00000201 <cols_W>:
     201:	fc 02 1c 02 fd                                      .....

00000206 <cols_V>:
     206:	f8 04 02 04 f9                                      .....

0000020b <cols_U>:
     20b:	fc 02 02 fd                                         ....

0000020f <cols_T>:
     20f:	80 80 fe 80 81                                      .....

00000214 <cols_S>:
     214:	64 92 92 4d                                         d..M

00000218 <cols_R>:
     218:	fe 90 98 67                                         ...g

0000021c <cols_Q>:
     21c:	7c 82 8a 7c 03                                      |..|.

00000221 <cols_P>:
     221:	fe 90 90 61                                         ...a

00000225 <cols_O>:
     225:	7c 82 82 7d                                         |..}

00000229 <cols_N>:
     229:	fe 20 10 ff                                         . ..

0000022d <cols_M>:
     22d:	fe 40 30 40 ff                                      .@0@.

00000232 <cols_L>:
     232:	fe 02 02 03                                         ....

00000236 <cols_K>:
     236:	fe 10 28 c7                                         ..(.

0000023a <cols_J>:
     23a:	04 02 02 fd                                         ....

0000023e <cols_I>:
     23e:	82 fe 83                                            ...

00000241 <cols_H>:
     241:	fe 10 10 ff                                         ....

00000245 <cols_G>:
     245:	7c 82 92 5d                                         |..]

00000249 <cols_F>:
     249:	fe 90 90 81                                         ....

0000024d <cols_E>:
     24d:	fe 92 92 83                                         ....

00000251 <cols_D>:
     251:	fe 82 82 7d                                         ...}

00000255 <cols_C>:
     255:	7c 82 82 45                                         |..E

00000259 <cols_B>:
     259:	fe 92 92 6d                                         ...m

0000025d <cols_A>:
     25d:	7e 90 90 7f                                         ~...

00000261 <__c.2050>:
     261:	1b 5b 25 64 6d 00                                   .[%dm.

00000267 <__c.2040>:
     267:	1b 5b 32 4a 00                                      .[2J.

0000026c <__c.2030>:
     26c:	1b 5b 30 6d 00                                      .[0m.

00000271 <__c.2025>:
     271:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000027a <__ctors_end>:
     27a:	11 24       	eor	r1, r1
     27c:	1f be       	out	0x3f, r1	; 63
     27e:	cf ef       	ldi	r28, 0xFF	; 255
     280:	d8 e0       	ldi	r29, 0x08	; 8
     282:	de bf       	out	0x3e, r29	; 62
     284:	cd bf       	out	0x3d, r28	; 61

00000286 <__do_copy_data>:
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b1 e0       	ldi	r27, 0x01	; 1
     28c:	e8 e0       	ldi	r30, 0x08	; 8
     28e:	f4 e2       	ldi	r31, 0x24	; 36
     290:	02 c0       	rjmp	.+4      	; 0x296 <__do_copy_data+0x10>
     292:	05 90       	lpm	r0, Z+
     294:	0d 92       	st	X+, r0
     296:	a4 38       	cpi	r26, 0x84	; 132
     298:	b1 07       	cpc	r27, r17
     29a:	d9 f7       	brne	.-10     	; 0x292 <__do_copy_data+0xc>

0000029c <__do_clear_bss>:
     29c:	22 e0       	ldi	r18, 0x02	; 2
     29e:	a4 e8       	ldi	r26, 0x84	; 132
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
     2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
     2a6:	a9 3c       	cpi	r26, 0xC9	; 201
     2a8:	b2 07       	cpc	r27, r18
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
     2ac:	0e 94 f5 09 	call	0x13ea	; 0x13ea <main>
     2b0:	0c 94 02 12 	jmp	0x2404	; 0x2404 <_exit>

000002b4 <__bad_interrupt>:
     2b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b8 <init_button_interrupts>:
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	
	// Enable the interrupt (see datasheet page 91)
	PCICR |= (1<<PCIE1);
     2b8:	e8 e6       	ldi	r30, 0x68	; 104
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	82 60       	ori	r24, 0x02	; 2
     2c0:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 92)
	PCIFR |= (1<<PCIF1);
     2c2:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     2c4:	ec e6       	ldi	r30, 0x6C	; 108
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	8f 60       	ori	r24, 0x0F	; 15
     2cc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     2ce:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
     2d2:	08 95       	ret

000002d4 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     2d4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     2d8:	18 16       	cp	r1, r24
     2da:	3c f5       	brge	.+78     	; 0x32a <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     2dc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     2e0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     2e2:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2e4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <__data_end>
     2e8:	92 30       	cpi	r25, 0x02	; 2
     2ea:	b4 f0       	brlt	.+44     	; 0x318 <button_pushed+0x44>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     2f2:	f9 01       	movw	r30, r18
     2f4:	eb 57       	subi	r30, 0x7B	; 123
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	40 81       	ld	r20, Z
     2fa:	f9 01       	movw	r30, r18
     2fc:	ec 57       	subi	r30, 0x7C	; 124
     2fe:	fe 4f       	sbci	r31, 0xFE	; 254
     300:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     302:	9f 5f       	subi	r25, 0xFF	; 255
     304:	29 2f       	mov	r18, r25
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <__data_end>
     30c:	04 2e       	mov	r0, r20
     30e:	00 0c       	add	r0, r0
     310:	55 0b       	sbc	r21, r21
     312:	24 17       	cp	r18, r20
     314:	35 07       	cpc	r19, r21
     316:	6c f3       	brlt	.-38     	; 0x2f2 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     318:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <__data_end>
     31c:	91 50       	subi	r25, 0x01	; 1
     31e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <__data_end>
		
		if(interrupts_were_enabled) {
     322:	66 23       	and	r22, r22
     324:	1c f4       	brge	.+6      	; 0x32c <button_pushed+0x58>
			// Turn them back on again
			sei();
     326:	78 94       	sei
     328:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     32a:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     32c:	08 95       	ret

0000032e <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     34c:	43 b1       	in	r20, 0x03	; 3
     34e:	4f 70       	andi	r20, 0x0F	; 15
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     354:	64 2f       	mov	r22, r20
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <__data_end>
     35c:	24 30       	cpi	r18, 0x04	; 4
     35e:	04 f5       	brge	.+64     	; 0x3a0 <__vector_5+0x72>
     360:	9b 01       	movw	r18, r22
     362:	08 2e       	mov	r0, r24
     364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_5+0x3c>
     366:	35 95       	asr	r19
     368:	27 95       	ror	r18
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <__vector_5+0x38>
     36e:	20 ff       	sbrs	r18, 0
     370:	17 c0       	rjmp	.+46     	; 0x3a0 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     372:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	08 2e       	mov	r0, r24
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__vector_5+0x52>
     37c:	35 95       	asr	r19
     37e:	27 95       	ror	r18
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <__vector_5+0x4e>
     384:	20 fd       	sbrc	r18, 0
     386:	0c c0       	rjmp	.+24     	; 0x3a0 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     388:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <__data_end>
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	2e 0f       	add	r18, r30
     390:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <__data_end>
     394:	0e 2e       	mov	r0, r30
     396:	00 0c       	add	r0, r0
     398:	ff 0b       	sbc	r31, r31
     39a:	eb 57       	subi	r30, 0x7B	; 123
     39c:	fe 4f       	sbci	r31, 0xFE	; 254
     39e:	80 83       	st	Z, r24
     3a0:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     3a2:	84 30       	cpi	r24, 0x04	; 4
     3a4:	91 05       	cpc	r25, r1
     3a6:	c1 f6       	brne	.-80     	; 0x358 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     3a8:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <last_button_state>
     3ac:	ff 91       	pop	r31
     3ae:	ef 91       	pop	r30
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	7f 91       	pop	r23
     3b6:	6f 91       	pop	r22
     3b8:	5f 91       	pop	r21
     3ba:	4f 91       	pop	r20
     3bc:	3f 91       	pop	r19
     3be:	2f 91       	pop	r18
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <will_frog_die_at_position>:
	return frog_row;
}

uint8_t get_frog_column(void) {
	return frog_column;
}
     3ca:	0f 93       	push	r16
     3cc:	26 2f       	mov	r18, r22
     3ce:	60 31       	cpi	r22, 0x10	; 16
     3d0:	08 f0       	brcs	.+2      	; 0x3d4 <will_frog_die_at_position+0xa>
     3d2:	5b c0       	rjmp	.+182    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     3d4:	48 2f       	mov	r20, r24
     3d6:	08 2e       	mov	r0, r24
     3d8:	00 0c       	add	r0, r0
     3da:	55 0b       	sbc	r21, r21
     3dc:	66 0b       	sbc	r22, r22
     3de:	77 0b       	sbc	r23, r23
     3e0:	48 30       	cpi	r20, 0x08	; 8
     3e2:	51 05       	cpc	r21, r1
     3e4:	28 f4       	brcc	.+10     	; 0x3f0 <will_frog_die_at_position+0x26>
     3e6:	fa 01       	movw	r30, r20
     3e8:	e2 5c       	subi	r30, 0xC2	; 194
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__tablejump2__>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	4e c0       	rjmp	.+156    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     3f4:	81 50       	subi	r24, 0x01	; 1
     3f6:	e8 2f       	mov	r30, r24
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	df 01       	movw	r26, r30
     3fc:	a0 57       	subi	r26, 0x70	; 112
     3fe:	be 4f       	sbci	r27, 0xFE	; 254
     400:	0c 91       	ld	r16, X
     402:	02 0f       	add	r16, r18
     404:	00 34       	cpi	r16, 0x40	; 64
     406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	00 54       	subi	r16, 0x40	; 64
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	e9 5d       	subi	r30, 0xD9	; 217
     418:	fe 4f       	sbci	r31, 0xFE	; 254
     41a:	20 81       	ld	r18, Z
     41c:	31 81       	ldd	r19, Z+1	; 0x01
     41e:	42 81       	ldd	r20, Z+2	; 0x02
     420:	53 81       	ldd	r21, Z+3	; 0x03
     422:	64 81       	ldd	r22, Z+4	; 0x04
     424:	75 81       	ldd	r23, Z+5	; 0x05
     426:	86 81       	ldd	r24, Z+6	; 0x06
     428:	97 81       	ldd	r25, Z+7	; 0x07
     42a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__lshrdi3>
     42e:	82 2f       	mov	r24, r18
     430:	81 70       	andi	r24, 0x01	; 1
     432:	2e c0       	rjmp	.+92     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     434:	85 50       	subi	r24, 0x05	; 5
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	e2 57       	subi	r30, 0x72	; 114
     43c:	fe 4f       	sbci	r31, 0xFE	; 254
     43e:	60 81       	ld	r22, Z
     440:	26 0f       	add	r18, r22
     442:	20 32       	cpi	r18, 0x20	; 32
     444:	08 f0       	brcs	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	20 52       	subi	r18, 0x20	; 32
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	fc 01       	movw	r30, r24
     452:	e1 5e       	subi	r30, 0xE1	; 225
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	80 81       	ld	r24, Z
     458:	91 81       	ldd	r25, Z+1	; 0x01
     45a:	a2 81       	ldd	r26, Z+2	; 0x02
     45c:	b3 81       	ldd	r27, Z+3	; 0x03
     45e:	04 c0       	rjmp	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     460:	b6 95       	lsr	r27
     462:	a7 95       	ror	r26
     464:	97 95       	ror	r25
     466:	87 95       	ror	r24
     468:	2a 95       	dec	r18
     46a:	d2 f7       	brpl	.-12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	82 27       	eor	r24, r18
     470:	81 70       	andi	r24, 0x01	; 1
     472:	0e c0       	rjmp	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     474:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <riverbank_status>
     478:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <riverbank_status+0x1>
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	96 95       	lsr	r25
     480:	87 95       	ror	r24
     482:	2a 95       	dec	r18
     484:	e2 f7       	brpl	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	81 70       	andi	r24, 0x01	; 1
     488:	03 c0       	rjmp	.+6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <redraw_roadside>:
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	60 97       	sbiw	r28, 0x10	; 16
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	fe 01       	movw	r30, r28
     4aa:	31 96       	adiw	r30, 0x01	; 1
     4ac:	9e 01       	movw	r18, r28
     4ae:	2f 5e       	subi	r18, 0xEF	; 239
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	91 e1       	ldi	r25, 0x11	; 17
     4b4:	91 93       	st	Z+, r25
     4b6:	e2 17       	cp	r30, r18
     4b8:	f3 07       	cpc	r31, r19
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <redraw_roadside+0x20>
     4bc:	be 01       	movw	r22, r28
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ledmatrix_update_row>
     4c6:	60 96       	adiw	r28, 0x10	; 16
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <redraw_traffic_lane>:
     4d8:	3f 92       	push	r3
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	60 97       	sbiw	r28, 0x10	; 16
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	48 2e       	mov	r4, r24
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	e0 57       	subi	r30, 0x70	; 112
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	e0 81       	ld	r30, Z
     518:	c9 01       	movw	r24, r18
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	89 5d       	subi	r24, 0xD9	; 217
     528:	9e 4f       	sbci	r25, 0xFE	; 254
     52a:	dc 01       	movw	r26, r24
     52c:	5c 90       	ld	r5, X
     52e:	11 96       	adiw	r26, 0x01	; 1
     530:	6c 90       	ld	r6, X
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	12 96       	adiw	r26, 0x02	; 2
     536:	7c 90       	ld	r7, X
     538:	12 97       	sbiw	r26, 0x02	; 2
     53a:	13 96       	adiw	r26, 0x03	; 3
     53c:	8c 90       	ld	r8, X
     53e:	13 97       	sbiw	r26, 0x03	; 3
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	9c 90       	ld	r9, X
     544:	14 97       	sbiw	r26, 0x04	; 4
     546:	15 96       	adiw	r26, 0x05	; 5
     548:	1c 91       	ld	r17, X
     54a:	15 97       	sbiw	r26, 0x05	; 5
     54c:	16 96       	adiw	r26, 0x06	; 6
     54e:	3c 90       	ld	r3, X
     550:	16 97       	sbiw	r26, 0x06	; 6
     552:	17 96       	adiw	r26, 0x07	; 7
     554:	fc 91       	ld	r31, X
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	7c 01       	movw	r14, r24
     55c:	6e 01       	movw	r12, r28
     55e:	91 e1       	ldi	r25, 0x11	; 17
     560:	c9 0e       	add	r12, r25
     562:	d1 1c       	adc	r13, r1
     564:	d9 01       	movw	r26, r18
     566:	a0 50       	subi	r26, 0x00	; 0
     568:	bf 4f       	sbci	r27, 0xFF	; 255
     56a:	5d 01       	movw	r10, r26
     56c:	25 2d       	mov	r18, r5
     56e:	36 2d       	mov	r19, r6
     570:	47 2d       	mov	r20, r7
     572:	58 2d       	mov	r21, r8
     574:	69 2d       	mov	r22, r9
     576:	71 2f       	mov	r23, r17
     578:	83 2d       	mov	r24, r3
     57a:	9f 2f       	mov	r25, r31
     57c:	0e 2f       	mov	r16, r30
     57e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__lshrdi3>
     582:	21 70       	andi	r18, 0x01	; 1
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__cmpdi2_s8>
     598:	29 f0       	breq	.+10     	; 0x5a4 <redraw_traffic_lane+0xcc>
     59a:	d5 01       	movw	r26, r10
     59c:	8c 91       	ld	r24, X
     59e:	d7 01       	movw	r26, r14
     5a0:	8c 93       	st	X, r24
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <redraw_traffic_lane+0xd0>
     5a4:	d7 01       	movw	r26, r14
     5a6:	1c 92       	st	X, r1
     5a8:	ef 5f       	subi	r30, 0xFF	; 255
     5aa:	e0 34       	cpi	r30, 0x40	; 64
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <redraw_traffic_lane+0xd8>
     5ae:	e0 e0       	ldi	r30, 0x00	; 0
     5b0:	bf ef       	ldi	r27, 0xFF	; 255
     5b2:	eb 1a       	sub	r14, r27
     5b4:	fb 0a       	sbc	r15, r27
     5b6:	ec 14       	cp	r14, r12
     5b8:	fd 04       	cpc	r15, r13
     5ba:	c1 f6       	brne	.-80     	; 0x56c <redraw_traffic_lane+0x94>
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	84 0d       	add	r24, r4
     5c6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ledmatrix_update_row>
     5ca:	60 96       	adiw	r28, 0x10	; 16
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	9f 90       	pop	r9
     5ec:	8f 90       	pop	r8
     5ee:	7f 90       	pop	r7
     5f0:	6f 90       	pop	r6
     5f2:	5f 90       	pop	r5
     5f4:	4f 90       	pop	r4
     5f6:	3f 90       	pop	r3
     5f8:	08 95       	ret

000005fa <redraw_river_channel>:
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	60 97       	sbiw	r28, 0x10	; 16
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	28 2f       	mov	r18, r24
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	e2 57       	subi	r30, 0x72	; 114
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	90 81       	ld	r25, Z
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	f9 01       	movw	r30, r18
     62c:	e1 5e       	subi	r30, 0xE1	; 225
     62e:	fe 4f       	sbci	r31, 0xFE	; 254
     630:	c0 80       	ld	r12, Z
     632:	d1 80       	ldd	r13, Z+1	; 0x01
     634:	e2 80       	ldd	r14, Z+2	; 0x02
     636:	f3 80       	ldd	r15, Z+3	; 0x03
     638:	fe 01       	movw	r30, r28
     63a:	31 96       	adiw	r30, 0x01	; 1
     63c:	9e 01       	movw	r18, r28
     63e:	2f 5e       	subi	r18, 0xEF	; 239
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	ac e3       	ldi	r26, 0x3C	; 60
     644:	b7 01       	movw	r22, r14
     646:	a6 01       	movw	r20, r12
     648:	09 2e       	mov	r0, r25
     64a:	04 c0       	rjmp	.+8      	; 0x654 <redraw_river_channel+0x5a>
     64c:	76 95       	lsr	r23
     64e:	67 95       	ror	r22
     650:	57 95       	ror	r21
     652:	47 95       	ror	r20
     654:	0a 94       	dec	r0
     656:	d2 f7       	brpl	.-12     	; 0x64c <redraw_river_channel+0x52>
     658:	40 ff       	sbrs	r20, 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <redraw_river_channel+0x66>
     65c:	a0 83       	st	Z, r26
     65e:	01 c0       	rjmp	.+2      	; 0x662 <redraw_river_channel+0x68>
     660:	10 82       	st	Z, r1
     662:	9f 5f       	subi	r25, 0xFF	; 255
     664:	90 32       	cpi	r25, 0x20	; 32
     666:	08 f0       	brcs	.+2      	; 0x66a <redraw_river_channel+0x70>
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	31 96       	adiw	r30, 0x01	; 1
     66c:	e2 17       	cp	r30, r18
     66e:	f3 07       	cpc	r31, r19
     670:	49 f7       	brne	.-46     	; 0x644 <redraw_river_channel+0x4a>
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	8b 5f       	subi	r24, 0xFB	; 251
     67a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ledmatrix_update_row>
     67e:	60 96       	adiw	r28, 0x10	; 16
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	08 95       	ret

00000698 <redraw_riverbank>:
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	60 97       	sbiw	r28, 0x10	; 16
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <riverbank>
     6b8:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <riverbank+0x1>
     6bc:	e0 90 8a 01 	lds	r14, 0x018A	; 0x80018a <riverbank_status>
     6c0:	f0 90 8b 01 	lds	r15, 0x018B	; 0x80018b <riverbank_status+0x1>
     6c4:	ae 01       	movw	r20, r28
     6c6:	4f 5f       	subi	r20, 0xFF	; 255
     6c8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5e       	subi	r22, 0xEF	; 239
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	fa 01       	movw	r30, r20
     6d2:	00 ef       	ldi	r16, 0xF0	; 240
     6d4:	11 e1       	ldi	r17, 0x11	; 17
     6d6:	cf 01       	movw	r24, r30
     6d8:	84 1b       	sub	r24, r20
     6da:	95 0b       	sbc	r25, r21
     6dc:	9d 01       	movw	r18, r26
     6de:	08 2e       	mov	r0, r24
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <redraw_riverbank+0x4e>
     6e2:	36 95       	lsr	r19
     6e4:	27 95       	ror	r18
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <redraw_riverbank+0x4a>
     6ea:	20 ff       	sbrs	r18, 0
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <redraw_riverbank+0x5a>
     6ee:	10 83       	st	Z, r17
     6f0:	0b c0       	rjmp	.+22     	; 0x708 <redraw_riverbank+0x70>
     6f2:	97 01       	movw	r18, r14
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <redraw_riverbank+0x62>
     6f6:	36 95       	lsr	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <redraw_riverbank+0x5e>
     6fe:	20 ff       	sbrs	r18, 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <redraw_riverbank+0x6e>
     702:	00 83       	st	Z, r16
     704:	01 c0       	rjmp	.+2      	; 0x708 <redraw_riverbank+0x70>
     706:	10 82       	st	Z, r1
     708:	31 96       	adiw	r30, 0x01	; 1
     70a:	e6 17       	cp	r30, r22
     70c:	f7 07       	cpc	r31, r23
     70e:	19 f7       	brne	.-58     	; 0x6d6 <redraw_riverbank+0x3e>
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	0e 94 a6 05 	call	0xb4c	; 0xb4c <ledmatrix_update_row>
     71c:	60 96       	adiw	r28, 0x10	; 16
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	08 95       	ret

00000736 <redraw_row>:
     736:	48 2f       	mov	r20, r24
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	48 30       	cpi	r20, 0x08	; 8
     73c:	51 05       	cpc	r21, r1
     73e:	90 f4       	brcc	.+36     	; 0x764 <redraw_row+0x2e>
     740:	fa 01       	movw	r30, r20
     742:	ea 5b       	subi	r30, 0xBA	; 186
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__tablejump2__>
     74a:	0e 94 4a 02 	call	0x494	; 0x494 <redraw_roadside>
     74e:	08 95       	ret
     750:	81 50       	subi	r24, 0x01	; 1
     752:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <redraw_traffic_lane>
     756:	08 95       	ret
     758:	85 50       	subi	r24, 0x05	; 5
     75a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <redraw_river_channel>
     75e:	08 95       	ret
     760:	0e 94 4c 03 	call	0x698	; 0x698 <redraw_riverbank>
     764:	08 95       	ret

00000766 <redraw_frog>:
     766:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <frog_dead>
     76a:	88 23       	and	r24, r24
     76c:	41 f0       	breq	.+16     	; 0x77e <redraw_frog+0x18>
     76e:	45 e3       	ldi	r20, 0x35	; 53
     770:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <frog_row>
     774:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <frog_column>
     778:	0e 94 87 05 	call	0xb0e	; 0xb0e <ledmatrix_update_pixel>
     77c:	08 95       	ret
     77e:	40 ef       	ldi	r20, 0xF0	; 240
     780:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <frog_row>
     784:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <frog_column>
     788:	0e 94 87 05 	call	0xb0e	; 0xb0e <ledmatrix_update_pixel>
     78c:	08 95       	ret

0000078e <put_frog_in_start_position>:
     78e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <frog_row>
     792:	87 e0       	ldi	r24, 0x07	; 7
     794:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <frog_column>
     798:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <frog_dead>
     79c:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
     7a0:	08 95       	ret

000007a2 <initialise_game>:
     7a2:	e0 e9       	ldi	r30, 0x90	; 144
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	12 82       	std	Z+2, r1	; 0x02
     7a8:	11 82       	std	Z+1, r1	; 0x01
     7aa:	10 82       	st	Z, r1
     7ac:	ee e8       	ldi	r30, 0x8E	; 142
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	11 82       	std	Z+1, r1	; 0x01
     7b2:	10 82       	st	Z, r1
     7b4:	8d ed       	ldi	r24, 0xDD	; 221
     7b6:	9d ed       	ldi	r25, 0xDD	; 221
     7b8:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <riverbank+0x1>
     7bc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <riverbank>
     7c0:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <riverbank_status+0x1>
     7c4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <riverbank_status>
     7c8:	0e 94 e7 05 	call	0xbce	; 0xbce <ledmatrix_clear>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 4a 02 	call	0x494	; 0x494 <redraw_roadside>
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	0e 94 4a 02 	call	0x494	; 0x494 <redraw_roadside>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <redraw_traffic_lane>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <redraw_traffic_lane>
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <redraw_traffic_lane>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 fd 02 	call	0x5fa	; 0x5fa <redraw_river_channel>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <redraw_river_channel>
     7f6:	0e 94 4c 03 	call	0x698	; 0x698 <redraw_riverbank>
     7fa:	0e 94 c7 03 	call	0x78e	; 0x78e <put_frog_in_start_position>
     7fe:	08 95       	ret

00000800 <move_frog_forward>:
     800:	cf 93       	push	r28
     802:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     806:	0e 94 9b 03 	call	0x736	; 0x736 <redraw_row>
     80a:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <frog_row>
     80e:	cf 5f       	subi	r28, 0xFF	; 255
     810:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <frog_column>
     814:	8c 2f       	mov	r24, r28
     816:	0e 94 e5 01 	call	0x3ca	; 0x3ca <will_frog_die_at_position>
     81a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
     81e:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <frog_row>
     822:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
     826:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <frog_dead>
     82a:	81 11       	cpse	r24, r1
     82c:	1c c0       	rjmp	.+56     	; 0x866 <move_frog_forward+0x66>
     82e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     832:	87 30       	cpi	r24, 0x07	; 7
     834:	c1 f4       	brne	.+48     	; 0x866 <move_frog_forward+0x66>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	00 90 94 01 	lds	r0, 0x0194	; 0x800194 <frog_column>
     83e:	02 c0       	rjmp	.+4      	; 0x844 <move_frog_forward+0x44>
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	0a 94       	dec	r0
     846:	e2 f7       	brpl	.-8      	; 0x840 <move_frog_forward+0x40>
     848:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <riverbank_status>
     84c:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <riverbank_status+0x1>
     850:	82 2b       	or	r24, r18
     852:	93 2b       	or	r25, r19
     854:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <riverbank_status+0x1>
     858:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <riverbank_status>
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_to_score>
     864:	04 c0       	rjmp	.+8      	; 0x86e <move_frog_forward+0x6e>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_to_score>
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <move_frog_backward>:
     872:	cf 93       	push	r28
     874:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     878:	0e 94 9b 03 	call	0x736	; 0x736 <redraw_row>
     87c:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <frog_row>
     880:	c1 50       	subi	r28, 0x01	; 1
     882:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <frog_column>
     886:	8c 2f       	mov	r24, r28
     888:	0e 94 e5 01 	call	0x3ca	; 0x3ca <will_frog_die_at_position>
     88c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
     890:	c0 93 95 01 	sts	0x0195, r28	; 0x800195 <frog_row>
     894:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <move_frog_to_left>:
     89c:	cf 93       	push	r28
     89e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     8a2:	0e 94 9b 03 	call	0x736	; 0x736 <redraw_row>
     8a6:	c0 91 94 01 	lds	r28, 0x0194	; 0x800194 <frog_column>
     8aa:	c1 50       	subi	r28, 0x01	; 1
     8ac:	6c 2f       	mov	r22, r28
     8ae:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     8b2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <will_frog_die_at_position>
     8b6:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
     8ba:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <frog_column>
     8be:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <move_frog_to_right>:
     8c6:	cf 93       	push	r28
     8c8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     8cc:	0e 94 9b 03 	call	0x736	; 0x736 <redraw_row>
     8d0:	c0 91 94 01 	lds	r28, 0x0194	; 0x800194 <frog_column>
     8d4:	cf 5f       	subi	r28, 0xFF	; 255
     8d6:	6c 2f       	mov	r22, r28
     8d8:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     8dc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <will_frog_die_at_position>
     8e0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
     8e4:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <frog_column>
     8e8:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <is_riverbank_full>:

uint8_t is_riverbank_full(void) {
	return (riverbank_status == 0xFFFF);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <riverbank_status>
     8f6:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <riverbank_status+0x1>
     8fa:	2f 3f       	cpi	r18, 0xFF	; 255
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x3>
     900:	80 e0       	ldi	r24, 0x00	; 0
}
     902:	08 95       	ret

00000904 <frog_has_reached_riverbank>:

uint8_t frog_has_reached_riverbank(void) {
	return (frog_row == RIVERBANK_ROW);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <frog_row>
     90a:	97 30       	cpi	r25, 0x07	; 7
     90c:	09 f0       	breq	.+2      	; 0x910 <frog_has_reached_riverbank+0xc>
     90e:	80 e0       	ldi	r24, 0x00	; 0
}
     910:	08 95       	ret

00000912 <is_frog_dead>:

uint8_t is_frog_dead(void) {
	return frog_dead;
}
     912:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <frog_dead>
     916:	08 95       	ret

00000918 <instant_dead>:

void instant_dead(void)
{
	frog_dead = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
     91e:	08 95       	ret

00000920 <scroll_vehicle_lane>:
}

// Scroll the given lane of traffic. (lane value must be 0 to 2)
void scroll_vehicle_lane(uint8_t lane, int8_t direction) {
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == lane + FIRST_VEHICLE_ROW);
     928:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <frog_row>
     92c:	0c 2e       	mov	r0, r28
     92e:	00 0c       	add	r0, r0
     930:	dd 0b       	sbc	r29, r29
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	89 01       	movw	r16, r18
     938:	0f 5f       	subi	r16, 0xFF	; 255
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     93c:	f9 01       	movw	r30, r18
     93e:	e0 57       	subi	r30, 0x70	; 112
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	90 81       	ld	r25, Z
     944:	96 1b       	sub	r25, r22
	if(lane_position[lane] < 0) {
     946:	32 f4       	brpl	.+12     	; 0x954 <scroll_vehicle_lane+0x34>
		lane_position[lane] = LANE_DATA_WIDTH-1;
     948:	f9 01       	movw	r30, r18
     94a:	e0 57       	subi	r30, 0x70	; 112
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	9f e3       	ldi	r25, 0x3F	; 63
     950:	90 83       	st	Z, r25
     952:	0b c0       	rjmp	.+22     	; 0x96a <scroll_vehicle_lane+0x4a>
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
     954:	90 34       	cpi	r25, 0x40	; 64
     956:	2c f4       	brge	.+10     	; 0x962 <scroll_vehicle_lane+0x42>
	
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     958:	f9 01       	movw	r30, r18
     95a:	e0 57       	subi	r30, 0x70	; 112
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	90 83       	st	Z, r25
     960:	04 c0       	rjmp	.+8      	; 0x96a <scroll_vehicle_lane+0x4a>
	if(lane_position[lane] < 0) {
		lane_position[lane] = LANE_DATA_WIDTH-1;
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
		lane_position[lane] = 0;
     962:	f9 01       	movw	r30, r18
     964:	e0 57       	subi	r30, 0x70	; 112
     966:	fe 4f       	sbci	r31, 0xFE	; 254
     968:	10 82       	st	Z, r1
	// Update whether the frog will be alive or not. (The frog hasn't moved but
	// it may have been hit by a vehicle.)
	//frog_dead = will_frog_die_at_position(frog_row, frog_column);
	
	// Show the lane on the display
	redraw_traffic_lane(lane);
     96a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <redraw_traffic_lane>
	
	// If the frog is in this row, show it
	if(frog_is_in_this_row) {
     96e:	c0 17       	cp	r28, r16
     970:	d1 07       	cpc	r29, r17
     972:	51 f4       	brne	.+20     	; 0x988 <scroll_vehicle_lane+0x68>
		frog_dead = will_frog_die_at_position(frog_row, frog_column);
     974:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <frog_column>
     978:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <frog_row>
     97c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <will_frog_die_at_position>
     980:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <frog_dead>
		redraw_frog();
     984:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
	}
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <scroll_river_channel>:


void scroll_river_channel(uint8_t channel, int8_t direction) {
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == channel + FIRST_RIVER_ROW);
     99a:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <frog_row>
     99e:	0c 2e       	mov	r0, r28
     9a0:	00 0c       	add	r0, r0
     9a2:	dd 0b       	sbc	r29, r29
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	89 01       	movw	r16, r18
     9aa:	0b 5f       	subi	r16, 0xFB	; 251
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
	// Note, if the frog is in this row then it will be on a log
	
	if(frog_is_in_this_row) {
     9ae:	c0 17       	cp	r28, r16
     9b0:	d1 07       	cpc	r29, r17
     9b2:	c9 f4       	brne	.+50     	; 0x9e6 <scroll_river_channel+0x54>
		// Check if they're going to hit the edge - don't let the frog
		// go beyond the edge
		if(direction == 1 && frog_column == 15) {
     9b4:	61 30       	cpi	r22, 0x01	; 1
     9b6:	41 f4       	brne	.+16     	; 0x9c8 <scroll_river_channel+0x36>
     9b8:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <frog_column>
     9bc:	9f 30       	cpi	r25, 0x0F	; 15
     9be:	71 f4       	brne	.+28     	; 0x9dc <scroll_river_channel+0x4a>
			frog_dead = 1; // hit right edge
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <frog_dead>
     9c6:	0f c0       	rjmp	.+30     	; 0x9e6 <scroll_river_channel+0x54>
		} else if(direction == -1 && frog_column == 0) {
     9c8:	6f 3f       	cpi	r22, 0xFF	; 255
     9ca:	41 f4       	brne	.+16     	; 0x9dc <scroll_river_channel+0x4a>
     9cc:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <frog_column>
     9d0:	91 11       	cpse	r25, r1
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <scroll_river_channel+0x4a>
			frog_dead = 1; // hit left edge
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <frog_dead>
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <scroll_river_channel+0x54>
		} else {
			// Move the frog with the log - they're not going to hit the edge
			frog_column += direction;
     9dc:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <frog_column>
     9e0:	96 0f       	add	r25, r22
     9e2:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <frog_column>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     9e6:	f9 01       	movw	r30, r18
     9e8:	e2 57       	subi	r30, 0x72	; 114
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	90 81       	ld	r25, Z
     9ee:	96 1b       	sub	r25, r22
	if(log_position[channel] < 0) {
     9f0:	32 f4       	brpl	.+12     	; 0x9fe <scroll_river_channel+0x6c>
		log_position[channel] = LOG_DATA_WIDTH-1;
     9f2:	f9 01       	movw	r30, r18
     9f4:	e2 57       	subi	r30, 0x72	; 114
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	9f e1       	ldi	r25, 0x1F	; 31
     9fa:	90 83       	st	Z, r25
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <scroll_river_channel+0x82>
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
     9fe:	90 32       	cpi	r25, 0x20	; 32
     a00:	2c f4       	brge	.+10     	; 0xa0c <scroll_river_channel+0x7a>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     a02:	f9 01       	movw	r30, r18
     a04:	e2 57       	subi	r30, 0x72	; 114
     a06:	fe 4f       	sbci	r31, 0xFE	; 254
     a08:	90 83       	st	Z, r25
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <scroll_river_channel+0x82>
	if(log_position[channel] < 0) {
		log_position[channel] = LOG_DATA_WIDTH-1;
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
		log_position[channel] = 0;
     a0c:	f9 01       	movw	r30, r18
     a0e:	e2 57       	subi	r30, 0x72	; 114
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	10 82       	st	Z, r1
	}
		
	// Work out the log data to send to the display
	redraw_river_channel(channel);
     a14:	0e 94 fd 02 	call	0x5fa	; 0x5fa <redraw_river_channel>
		
	// If the frog is in this row, put them on the log
	if(frog_is_in_this_row) {
     a18:	c0 17       	cp	r28, r16
     a1a:	d1 07       	cpc	r29, r17
     a1c:	11 f4       	brne	.+4      	; 0xa22 <scroll_river_channel+0x90>
		redraw_frog();
     a1e:	0e 94 b3 03 	call	0x766	; 0x766 <redraw_frog>
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <init_joystick_interrupts>:
			sei();
		}

	}
	return return_value;
}
     a2c:	80 e4       	ldi	r24, 0x40	; 64
     a2e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     a32:	ea e7       	ldi	r30, 0x7A	; 122
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	86 e8       	ldi	r24, 0x86	; 134
     a38:	80 83       	st	Z, r24
     a3a:	80 83       	st	Z, r24
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	81 b9       	out	0x01, r24	; 1
     a40:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <joystick_queue_length>
     a44:	08 95       	ret

00000a46 <__vector_24>:

ISR(ADC_vect){
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	
	while(ADCSRA & (1<<ADSC)) {
     a68:	ea e7       	ldi	r30, 0x7A	; 122
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	86 fd       	sbrc	r24, 6
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <__vector_24+0x26>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
     a72:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     a76:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if(x_or_y == 0) {
     a7a:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <x_or_y>
     a7e:	21 11       	cpse	r18, r1
     a80:	0d c0       	rjmp	.+26     	; 0xa9c <__vector_24+0x56>
		printf("X: %4d ", value);
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	9f 93       	push	r25
     a8c:	8f 93       	push	r24
     a8e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <printf>
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0c c0       	rjmp	.+24     	; 0xab4 <__vector_24+0x6e>
		} else {
		printf("Y: %4d\n", value);
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	87 e4       	ldi	r24, 0x47	; 71
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <printf>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
	}
	
	// Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	x_or_y ^= 1;
     ab4:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <x_or_y>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	89 27       	eor	r24, r25
     abc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <x_or_y>
	if(x_or_y == 0) {
     ac0:	81 11       	cpse	r24, r1
     ac2:	06 c0       	rjmp	.+12     	; 0xad0 <__vector_24+0x8a>
		ADMUX &= ~1;
     ac4:	ec e7       	ldi	r30, 0x7C	; 124
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	80 83       	st	Z, r24
     ace:	05 c0       	rjmp	.+10     	; 0xada <__vector_24+0x94>
		} else {
		ADMUX |= 1;
     ad0:	ec e7       	ldi	r30, 0x7C	; 124
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
	}
	
	// Begin processing again
	ADCSRA |= (1<<ADSC);
     ada:	ea e7       	ldi	r30, 0x7A	; 122
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	80 64       	ori	r24, 0x40	; 64
     ae2:	80 83       	st	Z, r24
	
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     b06:	80 e8       	ldi	r24, 0x80	; 128
     b08:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <spi_setup_master>
     b0c:	08 95       	ret

00000b0e <ledmatrix_update_pixel>:
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	80 31       	cpi	r24, 0x10	; 16
     b16:	b0 f4       	brcc	.+44     	; 0xb44 <ledmatrix_update_pixel+0x36>
     b18:	68 30       	cpi	r22, 0x08	; 8
     b1a:	a0 f4       	brcc	.+40     	; 0xb44 <ledmatrix_update_pixel+0x36>
     b1c:	14 2f       	mov	r17, r20
     b1e:	c6 2f       	mov	r28, r22
     b20:	d8 2f       	mov	r29, r24
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b28:	6c 2f       	mov	r22, r28
     b2a:	67 70       	andi	r22, 0x07	; 7
     b2c:	80 e1       	ldi	r24, 0x10	; 16
     b2e:	68 9f       	mul	r22, r24
     b30:	90 01       	movw	r18, r0
     b32:	11 24       	eor	r1, r1
     b34:	8d 2f       	mov	r24, r29
     b36:	8f 70       	andi	r24, 0x0F	; 15
     b38:	82 2b       	or	r24, r18
     b3a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b3e:	81 2f       	mov	r24, r17
     b40:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	08 95       	ret

00000b4c <ledmatrix_update_row>:
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	90 f4       	brcc	.+36     	; 0xb7c <ledmatrix_update_row+0x30>
     b58:	8b 01       	movw	r16, r22
     b5a:	c8 2f       	mov	r28, r24
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b62:	8c 2f       	mov	r24, r28
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b6a:	e8 01       	movw	r28, r16
     b6c:	00 5f       	subi	r16, 0xF0	; 240
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
     b70:	89 91       	ld	r24, Y+
     b72:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b76:	c0 17       	cp	r28, r16
     b78:	d1 07       	cpc	r29, r17
     b7a:	d1 f7       	brne	.-12     	; 0xb70 <ledmatrix_update_row+0x24>
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <ledmatrix_update_column>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	80 31       	cpi	r24, 0x10	; 16
     b90:	90 f4       	brcc	.+36     	; 0xbb6 <ledmatrix_update_column+0x30>
     b92:	8b 01       	movw	r16, r22
     b94:	c8 2f       	mov	r28, r24
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     b9c:	8c 2f       	mov	r24, r28
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     ba4:	e8 01       	movw	r28, r16
     ba6:	08 5f       	subi	r16, 0xF8	; 248
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	89 91       	ld	r24, Y+
     bac:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     bb0:	c0 17       	cp	r28, r16
     bb2:	d1 07       	cpc	r29, r17
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <ledmatrix_update_column+0x24>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <ledmatrix_shift_display_left>:
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     bcc:	08 95       	ret

00000bce <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     bce:	8f e0       	ldi	r24, 0x0F	; 15
     bd0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <spi_send_byte>
     bd4:	08 95       	ret

00000bd6 <get_lives>:
	return (lives == 0);
}

void set_lives(uint16_t value)
{
	lives = value;
     bd6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     bda:	08 95       	ret

00000bdc <no_lives_left>:
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <lives>
     be2:	91 11       	cpse	r25, r1
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret

00000be8 <display_lives>:


// Restart Port according to life
void display_lives(void)
{	
	if(lives == 0)
     be8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     bec:	81 11       	cpse	r24, r1
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <display_lives+0xa>
	{
		PORTA = 0b0000000;
     bf0:	12 b8       	out	0x02, r1	; 2
	}
	if(lives == 1)
     bf2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	11 f4       	brne	.+4      	; 0xbfe <display_lives+0x16>
	{
		PORTA = 0b10000000;
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	82 b9       	out	0x02, r24	; 2
	}
	if(lives == 2)
     bfe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	11 f4       	brne	.+4      	; 0xc0a <display_lives+0x22>
	{
		PORTA = 0b11000000;
     c06:	80 ec       	ldi	r24, 0xC0	; 192
     c08:	82 b9       	out	0x02, r24	; 2
	}
	if(lives == 3)
     c0a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	11 f4       	brne	.+4      	; 0xc16 <display_lives+0x2e>
	{
		PORTA = 0b11100000;
     c12:	80 ee       	ldi	r24, 0xE0	; 224
     c14:	82 b9       	out	0x02, r24	; 2
	}
	if (lives == 4)
     c16:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	11 f4       	brne	.+4      	; 0xc22 <display_lives+0x3a>
	{
		PORTA = 0b11110000;
     c1e:	80 ef       	ldi	r24, 0xF0	; 240
     c20:	82 b9       	out	0x02, r24	; 2
     c22:	08 95       	ret

00000c24 <init_lives>:
uint8_t lives = 3;

// Initialize lives
void init_lives(void)
{
	DDRA = 0xF0;
     c24:	80 ef       	ldi	r24, 0xF0	; 240
     c26:	81 b9       	out	0x01, r24	; 1
	display_lives();
     c28:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <display_lives>
     c2c:	08 95       	ret

00000c2e <minus_lives>:
void minus_lives(void)
{
	// Check to see lives that must not be less than 0.
	if(lives >= 0)
	{
		lives--;
     c2e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     c32:	81 50       	subi	r24, 0x01	; 1
     c34:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lives>
	}
	display_lives();
     c38:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <display_lives>
     c3c:	08 95       	ret

00000c3e <add_lives>:
}

// Add Lives
void add_lives(void)
{
	if(lives < 4)
     c3e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <lives>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	18 f4       	brcc	.+6      	; 0xc4c <add_lives+0xe>
	{
		lives++;
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <lives>
	}
	display_lives();
     c4c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <display_lives>
     c50:	08 95       	ret

00000c52 <initialise_hardware>:
	
	
}

void initialise_hardware(void) {
	ledmatrix_setup();
     c52:	0e 94 83 05 	call	0xb06	; 0xb06 <ledmatrix_setup>
	init_button_interrupts();
     c56:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <init_button_interrupts>
	init_joystick_interrupts();
     c5a:	0e 94 16 05 	call	0xa2c	; 0xa2c <init_joystick_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	7b e4       	ldi	r23, 0x4B	; 75
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 8c 0b 	call	0x1718	; 0x1718 <init_serial_stdio>
	
	
	
	init_seven_seg();
     c6c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <init_seven_seg>
	
	
	// Turn on global interrupts
	sei();
     c70:	78 94       	sei
     c72:	08 95       	ret

00000c74 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     c74:	0e 94 bc 0c 	call	0x1978	; 0x1978 <clear_terminal>
	move_cursor(10,10);
     c78:	6a e0       	ldi	r22, 0x0A	; 10
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Frogger"));
     c84:	81 e7       	ldi	r24, 0x71	; 113
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	move_cursor(10,12);
     c90:	6c e0       	ldi	r22, 0x0C	; 12
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Project by Marcus Chan Jun Hong 45057377"));
     c9c:	88 e4       	ldi	r24, 0x48	; 72
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     ca8:	0e 94 e7 05 	call	0xbce	; 0xbce <ledmatrix_clear>
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("Frogger 45057377", COLOUR_GREEN);
     cb4:	60 ef       	ldi	r22, 0xF0	; 240
     cb6:	8f e4       	ldi	r24, 0x4F	; 79
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 55 0a 	call	0x14aa	; 0x14aa <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     cbe:	0d c0       	rjmp	.+26     	; 0xcda <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	2f e7       	ldi	r18, 0x7F	; 127
     cc2:	89 ea       	ldi	r24, 0xA9	; 169
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <splash_screen+0x52>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <splash_screen+0x5c>
     cd0:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     cd2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
     cd6:	8f 3f       	cpi	r24, 0xFF	; 255
     cd8:	29 f4       	brne	.+10     	; 0xce4 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("Frogger 45057377", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     cda:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <scroll_display>
     cde:	81 11       	cpse	r24, r1
     ce0:	ef cf       	rjmp	.-34     	; 0xcc0 <splash_screen+0x4c>
     ce2:	e8 cf       	rjmp	.-48     	; 0xcb4 <splash_screen+0x40>
     ce4:	08 95       	ret

00000ce6 <new_game>:
	}
}

void new_game(void) {
	
	level = 0;
     ce6:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <level>
	game_over_flag = 0;
     cea:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <game_over_flag>
	// Initialise the game and display
	//initialise_game();
	
	// Clear the serial terminal
	clear_terminal();
     cee:	0e 94 bc 0c 	call	0x1978	; 0x1978 <clear_terminal>
	
	// Initialise the score
	init_score();
     cf2:	0e 94 10 0a 	call	0x1420	; 0x1420 <init_score>
	
	// Initialise the lives
	init_lives();
     cf6:	0e 94 12 06 	call	0xc24	; 0xc24 <init_lives>
	
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     cfa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
	clear_serial_input_buffer();
     cfe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <clear_serial_input_buffer>
     d02:	08 95       	ret

00000d04 <handle_game_over>:
		return;
	}
}

void handle_game_over() {
		game_over_flag = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <game_over_flag>
		ledmatrix_clear();
     d0a:	0e 94 e7 05 	call	0xbce	; 0xbce <ledmatrix_clear>
		restart_count();
     d0e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <restart_count>
		clear_terminal();
     d12:	0e 94 bc 0c 	call	0x1978	; 0x1978 <clear_terminal>
		move_cursor(10,14);
     d16:	6e e0       	ldi	r22, 0x0E	; 14
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
		printf_P(PSTR("GAME OVER"));
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
		move_cursor(10,15);
     d2e:	6f e0       	ldi	r22, 0x0F	; 15
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	8a e0       	ldi	r24, 0x0A	; 10
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
		printf_P(PSTR("Press a button to start again"));
     d3a:	82 ef       	ldi	r24, 0xF2	; 242
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
		/*while(button_pushed() == NO_BUTTON_PUSHED) {
			; // wait
		}*/
		while(1) {
			set_scrolling_display_text("GAME OVER", COLOUR_RED);
     d4e:	6f e0       	ldi	r22, 0x0F	; 15
     d50:	80 e6       	ldi	r24, 0x60	; 96
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 55 0a 	call	0x14aa	; 0x14aa <set_scrolling_display_text>
			// Scroll the message until it has scrolled off the
			// display or a button is pushed
			while(scroll_display()) {
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <handle_game_over+0x6c>
     d5a:	2f e7       	ldi	r18, 0x7F	; 127
     d5c:	89 ea       	ldi	r24, 0xA9	; 169
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <handle_game_over+0x5c>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <handle_game_over+0x66>
     d6a:	00 00       	nop
				_delay_ms(150);
				if(button_pushed() == NO_BUTTON_PUSHED) {
     d6c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
		}*/
		while(1) {
			set_scrolling_display_text("GAME OVER", COLOUR_RED);
			// Scroll the message until it has scrolled off the
			// display or a button is pushed
			while(scroll_display()) {
     d70:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <scroll_display>
     d74:	81 11       	cpse	r24, r1
     d76:	f1 cf       	rjmp	.-30     	; 0xd5a <handle_game_over+0x56>
     d78:	ea cf       	rjmp	.-44     	; 0xd4e <handle_game_over+0x4a>

00000d7a <handle_game_completion>:
}

void handle_game_completion(void)
{
	
	clear_terminal();
     d7a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <clear_terminal>
	move_cursor(10,14);
     d7e:	6e e0       	ldi	r22, 0x0E	; 14
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	8a e0       	ldi	r24, 0x0A	; 10
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Congratulations"));
     d8a:	82 ee       	ldi	r24, 0xE2	; 226
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	move_cursor(10,15);
     d96:	6f e0       	ldi	r22, 0x0F	; 15
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("You beat the game!"));
     da2:	8f ec       	ldi	r24, 0xCF	; 207
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
	while(1)
	{
		set_scrolling_display_text("Congratulation!",COLOUR_RED);
     db6:	6f e0       	ldi	r22, 0x0F	; 15
     db8:	8a e6       	ldi	r24, 0x6A	; 106
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <handle_game_completion+0x5e>
     dc2:	2f e7       	ldi	r18, 0x7F	; 127
     dc4:	8a e1       	ldi	r24, 0x1A	; 26
     dc6:	96 e0       	ldi	r25, 0x06	; 6
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	80 40       	sbci	r24, 0x00	; 0
     dcc:	90 40       	sbci	r25, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <handle_game_completion+0x4e>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <handle_game_completion+0x58>
     dd2:	00 00       	nop
			_delay_ms(250);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     dd4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
	while(1)
	{
		set_scrolling_display_text("Congratulation!",COLOUR_RED);
		// Scroll the message until it has scrolled off the
		// display or a button is pushed
		while(scroll_display()) {
     dd8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <scroll_display>
     ddc:	81 11       	cpse	r24, r1
     dde:	f1 cf       	rjmp	.-30     	; 0xdc2 <handle_game_completion+0x48>
     de0:	ea cf       	rjmp	.-44     	; 0xdb6 <handle_game_completion+0x3c>

00000de2 <status_update>:
	
}

void status_update(void)
{
	clear_terminal();
     de2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <clear_terminal>
	move_cursor(10,13);
     de6:	6d e0       	ldi	r22, 0x0D	; 13
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Current Level %i"), level);
     df2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
     df6:	1f 92       	push	r1
     df8:	8f 93       	push	r24
     dfa:	8e eb       	ldi	r24, 0xBE	; 190
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	move_cursor(10,14);
     e06:	6e e0       	ldi	r22, 0x0E	; 14
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Current Lives %i"), get_lives());
     e12:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <get_lives>
     e16:	1f 92       	push	r1
     e18:	8f 93       	push	r24
     e1a:	8d ea       	ldi	r24, 0xAD	; 173
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
	move_cursor(10,15);
     e26:	6f e0       	ldi	r22, 0x0F	; 15
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Current Score %i"), get_score());	
     e32:	0e 94 4c 0a 	call	0x1498	; 0x1498 <get_score>
     e36:	9f 93       	push	r25
     e38:	8f 93       	push	r24
     e3a:	7f 93       	push	r23
     e3c:	6f 93       	push	r22
     e3e:	8c e9       	ldi	r24, 0x9C	; 156
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9f 93       	push	r25
     e44:	8f 93       	push	r24
     e46:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
     e4a:	8d b7       	in	r24, 0x3d	; 61
     e4c:	9e b7       	in	r25, 0x3e	; 62
     e4e:	0e 96       	adiw	r24, 0x0e	; 14
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	9e bf       	out	0x3e, r25	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	8d bf       	out	0x3d, r24	; 61
     e5a:	08 95       	ret

00000e5c <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
     e5c:	2f 92       	push	r2
     e5e:	3f 92       	push	r3
     e60:	4f 92       	push	r4
     e62:	5f 92       	push	r5
     e64:	6f 92       	push	r6
     e66:	7f 92       	push	r7
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	63 97       	sbiw	r28, 0x13	; 19
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
	
	init_timer0();
     e90:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <init_timer0>
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the vehicles
	// and logs were moved.
	set_count((14+level));
     e94:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
     e98:	82 5f       	subi	r24, 0xF2	; 242
     e9a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <set_count>
	current_time = get_current_time();
     e9e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <get_current_time>
     ea2:	4b 01       	movw	r8, r22
     ea4:	5c 01       	movw	r10, r24
	last_move_time3 = current_time;
	last_move_time4 = current_time;
	last_move_time5 = current_time;
	
	// XOR HAPPENS HERE
	direction_left = direction_left ^ direction_right;
     ea6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <direction_right>
     eaa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <direction_left>
     eae:	98 27       	eor	r25, r24
	direction_right = direction_right ^ direction_left;
     eb0:	89 27       	eor	r24, r25
     eb2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction_right>
	direction_left = direction_left ^ direction_right;
     eb6:	89 27       	eor	r24, r25
     eb8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <direction_left>
	current_time = get_current_time();
	last_move_time1 = current_time;
	last_move_time2 = current_time;
	last_move_time3 = current_time;
	last_move_time4 = current_time;
	last_move_time5 = current_time;
     ebc:	8d 86       	std	Y+13, r8	; 0x0d
     ebe:	9e 86       	std	Y+14, r9	; 0x0e
     ec0:	af 86       	std	Y+15, r10	; 0x0f
     ec2:	b8 8a       	std	Y+16, r11	; 0x10
	set_count((14+level));
	current_time = get_current_time();
	last_move_time1 = current_time;
	last_move_time2 = current_time;
	last_move_time3 = current_time;
	last_move_time4 = current_time;
     ec4:	89 86       	std	Y+9, r8	; 0x09
     ec6:	9a 86       	std	Y+10, r9	; 0x0a
     ec8:	ab 86       	std	Y+11, r10	; 0x0b
     eca:	bc 86       	std	Y+12, r11	; 0x0c
	// and logs were moved.
	set_count((14+level));
	current_time = get_current_time();
	last_move_time1 = current_time;
	last_move_time2 = current_time;
	last_move_time3 = current_time;
     ecc:	8d 82       	std	Y+5, r8	; 0x05
     ece:	9e 82       	std	Y+6, r9	; 0x06
     ed0:	af 82       	std	Y+7, r10	; 0x07
     ed2:	b8 86       	std	Y+8, r11	; 0x08
	// Get the current time and remember this as the last time the vehicles
	// and logs were moved.
	set_count((14+level));
	current_time = get_current_time();
	last_move_time1 = current_time;
	last_move_time2 = current_time;
     ed4:	89 82       	std	Y+1, r8	; 0x01
     ed6:	9a 82       	std	Y+2, r9	; 0x02
     ed8:	ab 82       	std	Y+3, r10	; 0x03
     eda:	bc 82       	std	Y+4, r11	; 0x04
	init_timer0();
	uint32_t current_time, last_move_time1, last_move_time2, last_move_time3,last_move_time4,last_move_time5;
	int8_t button;
	
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     edc:	19 8a       	std	Y+17, r1	; 0x11
			{
				stop_counter();
				set_display_attribute(FG_MAGENTA);
				set_display_attribute(TERM_BRIGHT);
				move_cursor(10,16);
				printf_P(PSTR("Paused...                "));
     ede:	0f 2e       	mov	r0, r31
     ee0:	fe e2       	ldi	r31, 0x2E	; 46
     ee2:	2f 2e       	mov	r2, r31
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	3f 2e       	mov	r3, r31
     ee8:	f0 2d       	mov	r31, r0
     eea:	0f ef       	ldi	r16, 0xFF	; 255
			// 1000ms (1 second) has passed since the last time we moved
			// the vehicles and logs - move them again and keep track of
			// the time when we did this.
			
			//1
			if(current_time >= last_move_time1 + 750-50*level)
     eec:	12 e3       	ldi	r17, 0x32	; 50
     eee:	0f 2e       	mov	r0, r31
     ef0:	fe ee       	ldi	r31, 0xEE	; 238
     ef2:	4f 2e       	mov	r4, r31
     ef4:	f2 e0       	ldi	r31, 0x02	; 2
     ef6:	5f 2e       	mov	r5, r31
     ef8:	61 2c       	mov	r6, r1
     efa:	71 2c       	mov	r7, r1
     efc:	f0 2d       	mov	r31, r0
	direction_left = direction_left ^ direction_right;
	
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!no_lives_left() && !is_riverbank_full()) 
     efe:	a6 c1       	rjmp	.+844    	; 0x124c <play_game+0x3f0>
	{
		
		if(!is_frog_dead()) 
     f00:	0e 94 89 04 	call	0x912	; 0x912 <is_frog_dead>
     f04:	81 11       	cpse	r24, r1
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <play_game+0xc2>
		{
			if(frog_has_reached_riverbank())
     f08:	0e 94 82 04 	call	0x904	; 0x904 <frog_has_reached_riverbank>
     f0c:	88 23       	and	r24, r24
     f0e:	39 f0       	breq	.+14     	; 0xf1e <play_game+0xc2>
			{
				set_count((14+level));
     f10:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
     f14:	82 5f       	subi	r24, 0xF2	; 242
     f16:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <set_count>
				// Frog reached the other side successfully but the
				// riverbank isn't full, put a new frog at the start
				put_frog_in_start_position();
     f1a:	0e 94 c7 03 	call	0x78e	; 0x78e <put_frog_in_start_position>
				
			}
			
		}
		
		if(is_count_over())
     f1e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <is_count_over>
     f22:	88 23       	and	r24, r24
     f24:	49 f0       	breq	.+18     	; 0xf38 <play_game+0xdc>
		{
			instant_dead();
     f26:	0e 94 8c 04 	call	0x918	; 0x918 <instant_dead>
			status_update();
     f2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <status_update>
			set_count((14+level));
     f2e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
     f32:	82 5f       	subi	r24, 0xF2	; 242
     f34:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <set_count>
		}
		
		
		if(is_frog_dead())
     f38:	0e 94 89 04 	call	0x912	; 0x912 <is_frog_dead>
     f3c:	88 23       	and	r24, r24
     f3e:	59 f0       	breq	.+22     	; 0xf56 <play_game+0xfa>
		{
			minus_lives();
     f40:	0e 94 17 06 	call	0xc2e	; 0xc2e <minus_lives>
			status_update();
     f44:	0e 94 f1 06 	call	0xde2	; 0xde2 <status_update>
			set_count((14+level));
     f48:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
     f4c:	82 5f       	subi	r24, 0xF2	; 242
     f4e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <set_count>
			put_frog_in_start_position();
     f52:	0e 94 c7 03 	call	0x78e	; 0x78e <put_frog_in_start_position>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     f56:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
     f5a:	8b 8b       	std	Y+19, r24	; 0x13
		
		
		if(button == NO_BUTTON_PUSHED) {
     f5c:	8f 3f       	cpi	r24, 0xFF	; 255
     f5e:	19 f5       	brne	.+70     	; 0xfa6 <play_game+0x14a>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     f60:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <serial_input_available>
     f64:	88 23       	and	r24, r24
     f66:	09 f1       	breq	.+66     	; 0xfaa <play_game+0x14e>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     f68:	e3 ec       	ldi	r30, 0xC3	; 195
     f6a:	f2 e0       	ldi	r31, 0x02	; 2
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <fgetc>
     f74:	8a 8b       	std	Y+18, r24	; 0x12
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     f76:	f9 89       	ldd	r31, Y+17	; 0x11
     f78:	f1 11       	cpse	r31, r1
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <play_game+0x12c>
     f7c:	8b 31       	cpi	r24, 0x1B	; 27
     f7e:	c1 f4       	brne	.+48     	; 0xfb0 <play_game+0x154>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	29 8b       	std	Y+17, r18	; 0x11
					serial_input = -1; // Don't further process this character
     f84:	0a 8b       	std	Y+18, r16	; 0x12
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <play_game+0x154>
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     f88:	39 89       	ldd	r19, Y+17	; 0x11
     f8a:	31 30       	cpi	r19, 0x01	; 1
     f8c:	39 f4       	brne	.+14     	; 0xf9c <play_game+0x140>
     f8e:	4a 89       	ldd	r20, Y+18	; 0x12
     f90:	4b 35       	cpi	r20, 0x5B	; 91
     f92:	69 f4       	brne	.+26     	; 0xfae <play_game+0x152>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     f94:	52 e0       	ldi	r21, 0x02	; 2
     f96:	59 8b       	std	Y+17, r21	; 0x11
					serial_input = -1; // Don't further process this character
     f98:	0a 8b       	std	Y+18, r16	; 0x12
     f9a:	0a c0       	rjmp	.+20     	; 0xfb0 <play_game+0x154>
				} else if(characters_into_escape_sequence == 2) {
     f9c:	89 89       	ldd	r24, Y+17	; 0x11
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <play_game+0x148>
     fa2:	60 c1       	rjmp	.+704    	; 0x1264 <play_game+0x408>
     fa4:	66 c1       	rjmp	.+716    	; 0x1272 <play_game+0x416>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     fa6:	0a 8b       	std	Y+18, r16	; 0x12
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <play_game+0x154>
     faa:	0a 8b       	std	Y+18, r16	; 0x12
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <play_game+0x154>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     fae:	19 8a       	std	Y+17, r1	; 0x11
				}
			}
		}
		if(!paused){
     fb0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <paused>
     fb4:	81 11       	cpse	r24, r1
     fb6:	72 c1       	rjmp	.+740    	; 0x129c <play_game+0x440>
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     fb8:	9b 89       	ldd	r25, Y+19	; 0x13
     fba:	93 30       	cpi	r25, 0x03	; 3
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <play_game+0x174>
     fbe:	8a 89       	ldd	r24, Y+18	; 0x12
     fc0:	8f 7d       	andi	r24, 0xDF	; 223
     fc2:	8c 34       	cpi	r24, 0x4C	; 76
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <play_game+0x17a>
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <play_game+0x174>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
     fc8:	19 8a       	std	Y+17, r1	; 0x11
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
     fca:	0a 8b       	std	Y+18, r16	; 0x12
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <play_game+0x174>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     fce:	19 8a       	std	Y+17, r1	; 0x11
		}
		if(!paused){
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
				// Attempt to move left
				move_frog_to_left();
     fd0:	0e 94 4e 04 	call	0x89c	; 0x89c <move_frog_to_left>
     fd4:	1f c0       	rjmp	.+62     	; 0x1014 <play_game+0x1b8>
			} else if(button==2 || escape_sequence_char=='A' || serial_input=='U' || serial_input=='u') {
     fd6:	eb 89       	ldd	r30, Y+19	; 0x13
     fd8:	e2 30       	cpi	r30, 0x02	; 2
     fda:	29 f0       	breq	.+10     	; 0xfe6 <play_game+0x18a>
     fdc:	90 2f       	mov	r25, r16
     fde:	91 34       	cpi	r25, 0x41	; 65
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <play_game+0x18a>
     fe2:	85 35       	cpi	r24, 0x55	; 85
     fe4:	19 f4       	brne	.+6      	; 0xfec <play_game+0x190>
				// Attempt to move forward
				move_frog_forward();
     fe6:	0e 94 00 04 	call	0x800	; 0x800 <move_frog_forward>
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <play_game+0x1b8>
			} else if(button==1 || escape_sequence_char=='B' || serial_input=='D' || serial_input=='d') {
     fec:	fb 89       	ldd	r31, Y+19	; 0x13
     fee:	f1 30       	cpi	r31, 0x01	; 1
     ff0:	21 f0       	breq	.+8      	; 0xffa <play_game+0x19e>
     ff2:	92 34       	cpi	r25, 0x42	; 66
     ff4:	11 f0       	breq	.+4      	; 0xffa <play_game+0x19e>
     ff6:	84 34       	cpi	r24, 0x44	; 68
     ff8:	19 f4       	brne	.+6      	; 0x1000 <play_game+0x1a4>
				// Attempt to move down
				move_frog_backward();
     ffa:	0e 94 39 04 	call	0x872	; 0x872 <move_frog_backward>
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <play_game+0x1b8>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
    1000:	2b 89       	ldd	r18, Y+19	; 0x13
    1002:	22 23       	and	r18, r18
    1004:	29 f0       	breq	.+10     	; 0x1010 <play_game+0x1b4>
    1006:	93 34       	cpi	r25, 0x43	; 67
    1008:	19 f0       	breq	.+6      	; 0x1010 <play_game+0x1b4>
    100a:	82 35       	cpi	r24, 0x52	; 82
    100c:	09 f0       	breq	.+2      	; 0x1010 <play_game+0x1b4>
    100e:	3e c1       	rjmp	.+636    	; 0x128c <play_game+0x430>
				// Attempt to move right
				move_frog_to_right();
    1010:	0e 94 63 04 	call	0x8c6	; 0x8c6 <move_frog_to_right>
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
    1014:	3a 89       	ldd	r19, Y+18	; 0x12
    1016:	30 37       	cpi	r19, 0x70	; 112
    1018:	21 f0       	breq	.+8      	; 0x1022 <play_game+0x1c6>
    101a:	4a 89       	ldd	r20, Y+18	; 0x12
    101c:	40 35       	cpi	r20, 0x50	; 80
    101e:	09 f0       	breq	.+2      	; 0x1022 <play_game+0x1c6>
    1020:	44 c0       	rjmp	.+136    	; 0x10aa <play_game+0x24e>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			paused = !paused;
    1022:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <paused>
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	81 11       	cpse	r24, r1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <paused>
			if(paused)
    1030:	81 11       	cpse	r24, r1
    1032:	1d c0       	rjmp	.+58     	; 0x106e <play_game+0x212>
			{
				stop_counter();
    1034:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <stop_counter>
				set_display_attribute(FG_MAGENTA);
    1038:	83 e2       	ldi	r24, 0x23	; 35
    103a:	0e 94 c5 0c 	call	0x198a	; 0x198a <set_display_attribute>
				set_display_attribute(TERM_BRIGHT);
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 c5 0c 	call	0x198a	; 0x198a <set_display_attribute>
				move_cursor(10,16);
    1044:	60 e1       	ldi	r22, 0x10	; 16
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
				printf_P(PSTR("Paused...                "));
    1050:	3f 92       	push	r3
    1052:	2f 92       	push	r2
    1054:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
				normal_display_mode();
    1058:	0e 94 b3 0c 	call	0x1966	; 0x1966 <normal_display_mode>
				move_cursor(10, 17);
    105c:	61 e1       	ldi	r22, 0x11	; 17
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	8a e0       	ldi	r24, 0x0A	; 10
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <play_game+0x24e>
			}
			else
			{
				start_counter();
    106e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <start_counter>
				set_display_attribute(FG_MAGENTA);
    1072:	83 e2       	ldi	r24, 0x23	; 35
    1074:	0e 94 c5 0c 	call	0x198a	; 0x198a <set_display_attribute>
				set_display_attribute(TERM_BRIGHT);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0e 94 c5 0c 	call	0x198a	; 0x198a <set_display_attribute>
				move_cursor(10,16);
    107e:	60 e1       	ldi	r22, 0x10	; 16
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	8a e0       	ldi	r24, 0x0A	; 10
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
				printf_P(PSTR("                   "));
    108a:	8a e1       	ldi	r24, 0x1A	; 26
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
				normal_display_mode();
    1096:	0e 94 b3 0c 	call	0x1966	; 0x1966 <normal_display_mode>
				move_cursor(10, 17);
    109a:	61 e1       	ldi	r22, 0x11	; 17
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	8a e0       	ldi	r24, 0x0A	; 10
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
			}
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    10aa:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <get_current_time>
    10ae:	6b 01       	movw	r12, r22
    10b0:	7c 01       	movw	r14, r24
		if(!is_frog_dead()  && !paused) 
    10b2:	0e 94 89 04 	call	0x912	; 0x912 <is_frog_dead>
    10b6:	81 11       	cpse	r24, r1
    10b8:	c9 c0       	rjmp	.+402    	; 0x124c <play_game+0x3f0>
    10ba:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <paused>
    10be:	81 11       	cpse	r24, r1
    10c0:	c5 c0       	rjmp	.+394    	; 0x124c <play_game+0x3f0>
			// 1000ms (1 second) has passed since the last time we moved
			// the vehicles and logs - move them again and keep track of
			// the time when we did this.
			
			//1
			if(current_time >= last_move_time1 + 750-50*level)
    10c2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    10c6:	18 9f       	mul	r17, r24
    10c8:	c0 01       	movw	r24, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	09 2e       	mov	r0, r25
    10ce:	00 0c       	add	r0, r0
    10d0:	aa 0b       	sbc	r26, r26
    10d2:	bb 0b       	sbc	r27, r27
    10d4:	a3 01       	movw	r20, r6
    10d6:	92 01       	movw	r18, r4
    10d8:	28 1b       	sub	r18, r24
    10da:	39 0b       	sbc	r19, r25
    10dc:	4a 0b       	sbc	r20, r26
    10de:	5b 0b       	sbc	r21, r27
    10e0:	da 01       	movw	r26, r20
    10e2:	c9 01       	movw	r24, r18
    10e4:	88 0d       	add	r24, r8
    10e6:	99 1d       	adc	r25, r9
    10e8:	aa 1d       	adc	r26, r10
    10ea:	bb 1d       	adc	r27, r11
    10ec:	c8 16       	cp	r12, r24
    10ee:	d9 06       	cpc	r13, r25
    10f0:	ea 06       	cpc	r14, r26
    10f2:	fb 06       	cpc	r15, r27
    10f4:	38 f0       	brcs	.+14     	; 0x1104 <play_game+0x2a8>
			{
				scroll_river_channel(0, direction_left);	
    10f6:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <direction_left>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 c9 04 	call	0x992	; 0x992 <scroll_river_channel>
				last_move_time1 = current_time;	
    1100:	46 01       	movw	r8, r12
    1102:	57 01       	movw	r10, r14
			}
			//2
			if(current_time >= last_move_time2 + 950-50*level)
    1104:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    1108:	18 9f       	mul	r17, r24
    110a:	c0 01       	movw	r24, r0
    110c:	11 24       	eor	r1, r1
    110e:	09 2e       	mov	r0, r25
    1110:	00 0c       	add	r0, r0
    1112:	aa 0b       	sbc	r26, r26
    1114:	bb 0b       	sbc	r27, r27
    1116:	26 eb       	ldi	r18, 0xB6	; 182
    1118:	33 e0       	ldi	r19, 0x03	; 3
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	28 1b       	sub	r18, r24
    1120:	39 0b       	sbc	r19, r25
    1122:	4a 0b       	sbc	r20, r26
    1124:	5b 0b       	sbc	r21, r27
    1126:	da 01       	movw	r26, r20
    1128:	c9 01       	movw	r24, r18
    112a:	29 81       	ldd	r18, Y+1	; 0x01
    112c:	3a 81       	ldd	r19, Y+2	; 0x02
    112e:	4b 81       	ldd	r20, Y+3	; 0x03
    1130:	5c 81       	ldd	r21, Y+4	; 0x04
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	a4 1f       	adc	r26, r20
    1138:	b5 1f       	adc	r27, r21
    113a:	c8 16       	cp	r12, r24
    113c:	d9 06       	cpc	r13, r25
    113e:	ea 06       	cpc	r14, r26
    1140:	fb 06       	cpc	r15, r27
    1142:	48 f0       	brcs	.+18     	; 0x1156 <play_game+0x2fa>
			{
				
				scroll_river_channel(1, direction_right);	
    1144:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <direction_right>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 c9 04 	call	0x992	; 0x992 <scroll_river_channel>
				last_move_time2 = current_time;	
    114e:	c9 82       	std	Y+1, r12	; 0x01
    1150:	da 82       	std	Y+2, r13	; 0x02
    1152:	eb 82       	std	Y+3, r14	; 0x03
    1154:	fc 82       	std	Y+4, r15	; 0x04
			}
			//3
			if(current_time >= last_move_time3 + 1150-50*level)
    1156:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    115a:	18 9f       	mul	r17, r24
    115c:	c0 01       	movw	r24, r0
    115e:	11 24       	eor	r1, r1
    1160:	09 2e       	mov	r0, r25
    1162:	00 0c       	add	r0, r0
    1164:	aa 0b       	sbc	r26, r26
    1166:	bb 0b       	sbc	r27, r27
    1168:	2e e7       	ldi	r18, 0x7E	; 126
    116a:	34 e0       	ldi	r19, 0x04	; 4
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	28 1b       	sub	r18, r24
    1172:	39 0b       	sbc	r19, r25
    1174:	4a 0b       	sbc	r20, r26
    1176:	5b 0b       	sbc	r21, r27
    1178:	da 01       	movw	r26, r20
    117a:	c9 01       	movw	r24, r18
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	4f 81       	ldd	r20, Y+7	; 0x07
    1182:	58 85       	ldd	r21, Y+8	; 0x08
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	a4 1f       	adc	r26, r20
    118a:	b5 1f       	adc	r27, r21
    118c:	c8 16       	cp	r12, r24
    118e:	d9 06       	cpc	r13, r25
    1190:	ea 06       	cpc	r14, r26
    1192:	fb 06       	cpc	r15, r27
    1194:	48 f0       	brcs	.+18     	; 0x11a8 <play_game+0x34c>
			{	
				scroll_vehicle_lane(0, direction_right);
    1196:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <direction_right>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 90 04 	call	0x920	; 0x920 <scroll_vehicle_lane>
				last_move_time3 = current_time;	
    11a0:	cd 82       	std	Y+5, r12	; 0x05
    11a2:	de 82       	std	Y+6, r13	; 0x06
    11a4:	ef 82       	std	Y+7, r14	; 0x07
    11a6:	f8 86       	std	Y+8, r15	; 0x08
			}
			//4
			if(current_time >= last_move_time4 + 1200-50*level)
    11a8:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    11ac:	18 9f       	mul	r17, r24
    11ae:	c0 01       	movw	r24, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	09 2e       	mov	r0, r25
    11b4:	00 0c       	add	r0, r0
    11b6:	aa 0b       	sbc	r26, r26
    11b8:	bb 0b       	sbc	r27, r27
    11ba:	20 eb       	ldi	r18, 0xB0	; 176
    11bc:	34 e0       	ldi	r19, 0x04	; 4
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	28 1b       	sub	r18, r24
    11c4:	39 0b       	sbc	r19, r25
    11c6:	4a 0b       	sbc	r20, r26
    11c8:	5b 0b       	sbc	r21, r27
    11ca:	da 01       	movw	r26, r20
    11cc:	c9 01       	movw	r24, r18
    11ce:	29 85       	ldd	r18, Y+9	; 0x09
    11d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    11d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    11d6:	82 0f       	add	r24, r18
    11d8:	93 1f       	adc	r25, r19
    11da:	a4 1f       	adc	r26, r20
    11dc:	b5 1f       	adc	r27, r21
    11de:	c8 16       	cp	r12, r24
    11e0:	d9 06       	cpc	r13, r25
    11e2:	ea 06       	cpc	r14, r26
    11e4:	fb 06       	cpc	r15, r27
    11e6:	48 f0       	brcs	.+18     	; 0x11fa <play_game+0x39e>
			{	
				scroll_vehicle_lane(1, direction_left);
    11e8:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <direction_left>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	0e 94 90 04 	call	0x920	; 0x920 <scroll_vehicle_lane>
				last_move_time4 = current_time;	
    11f2:	c9 86       	std	Y+9, r12	; 0x09
    11f4:	da 86       	std	Y+10, r13	; 0x0a
    11f6:	eb 86       	std	Y+11, r14	; 0x0b
    11f8:	fc 86       	std	Y+12, r15	; 0x0c
			}
			//5
			if(current_time >= last_move_time5 + 1000-50*level)
    11fa:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    11fe:	18 9f       	mul	r17, r24
    1200:	c0 01       	movw	r24, r0
    1202:	11 24       	eor	r1, r1
    1204:	09 2e       	mov	r0, r25
    1206:	00 0c       	add	r0, r0
    1208:	aa 0b       	sbc	r26, r26
    120a:	bb 0b       	sbc	r27, r27
    120c:	28 ee       	ldi	r18, 0xE8	; 232
    120e:	33 e0       	ldi	r19, 0x03	; 3
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	28 1b       	sub	r18, r24
    1216:	39 0b       	sbc	r19, r25
    1218:	4a 0b       	sbc	r20, r26
    121a:	5b 0b       	sbc	r21, r27
    121c:	da 01       	movw	r26, r20
    121e:	c9 01       	movw	r24, r18
    1220:	2d 85       	ldd	r18, Y+13	; 0x0d
    1222:	3e 85       	ldd	r19, Y+14	; 0x0e
    1224:	4f 85       	ldd	r20, Y+15	; 0x0f
    1226:	58 89       	ldd	r21, Y+16	; 0x10
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	a4 1f       	adc	r26, r20
    122e:	b5 1f       	adc	r27, r21
    1230:	c8 16       	cp	r12, r24
    1232:	d9 06       	cpc	r13, r25
    1234:	ea 06       	cpc	r14, r26
    1236:	fb 06       	cpc	r15, r27
    1238:	48 f0       	brcs	.+18     	; 0x124c <play_game+0x3f0>
			{
				scroll_vehicle_lane(2, direction_right);	
    123a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <direction_right>
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 90 04 	call	0x920	; 0x920 <scroll_vehicle_lane>
				last_move_time5 = current_time;	
    1244:	cd 86       	std	Y+13, r12	; 0x0d
    1246:	de 86       	std	Y+14, r13	; 0x0e
    1248:	ef 86       	std	Y+15, r14	; 0x0f
    124a:	f8 8a       	std	Y+16, r15	; 0x10
	direction_left = direction_left ^ direction_right;
	
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!no_lives_left() && !is_riverbank_full()) 
    124c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <no_lives_left>
    1250:	81 11       	cpse	r24, r1
    1252:	05 c0       	rjmp	.+10     	; 0x125e <play_game+0x402>
    1254:	0e 94 78 04 	call	0x8f0	; 0x8f0 <is_riverbank_full>
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <play_game+0x402>
    125c:	51 ce       	rjmp	.-862    	; 0xf00 <play_game+0xa4>
		}
		
		
	}
	// We get here if the frog is dead or the riverbank is full
	if(is_riverbank_full())
    125e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <is_riverbank_full>
    1262:	4c c0       	rjmp	.+152    	; 0x12fc <play_game+0x4a0>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
		if(!paused){
    1264:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <paused>
    1268:	88 23       	and	r24, r24
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <play_game+0x448>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    126c:	19 8a       	std	Y+17, r1	; 0x11
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    126e:	0a 8b       	std	Y+18, r16	; 0x12
    1270:	d4 ce       	rjmp	.-600    	; 0x101a <play_game+0x1be>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
		if(!paused){
    1272:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <paused>
    1276:	81 11       	cpse	r24, r1
    1278:	2f c0       	rjmp	.+94     	; 0x12d8 <play_game+0x47c>
    127a:	1d c0       	rjmp	.+58     	; 0x12b6 <play_game+0x45a>
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			paused = !paused;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <paused>
    1282:	91 11       	cpse	r25, r1
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <paused>
    128a:	d4 ce       	rjmp	.-600    	; 0x1034 <play_game+0x1d8>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
				// Attempt to move right
				move_frog_to_right();
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
    128c:	3a 89       	ldd	r19, Y+18	; 0x12
    128e:	30 37       	cpi	r19, 0x70	; 112
    1290:	09 f0       	breq	.+2      	; 0x1294 <play_game+0x438>
    1292:	c3 ce       	rjmp	.-634    	; 0x101a <play_game+0x1be>
    1294:	f3 cf       	rjmp	.-26     	; 0x127c <play_game+0x420>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			paused = !paused;
    1296:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <paused>
    129a:	e9 ce       	rjmp	.-558    	; 0x106e <play_game+0x212>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
				// Attempt to move right
				move_frog_to_right();
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
    129c:	4a 89       	ldd	r20, Y+18	; 0x12
    129e:	40 37       	cpi	r20, 0x70	; 112
    12a0:	41 f5       	brne	.+80     	; 0x12f2 <play_game+0x496>
    12a2:	f9 cf       	rjmp	.-14     	; 0x1296 <play_game+0x43a>
				}
			}
		}
		if(!paused){
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    12a4:	5a 89       	ldd	r21, Y+18	; 0x12
    12a6:	54 34       	cpi	r21, 0x44	; 68
    12a8:	09 f4       	brne	.+2      	; 0x12ac <play_game+0x450>
    12aa:	8e ce       	rjmp	.-740    	; 0xfc8 <play_game+0x16c>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    12ac:	95 2f       	mov	r25, r21
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    12ae:	19 8a       	std	Y+17, r1	; 0x11
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    12b0:	0a 8b       	std	Y+18, r16	; 0x12
				}
			}
		}
		if(!paused){
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    12b2:	8f ed       	ldi	r24, 0xDF	; 223
    12b4:	94 ce       	rjmp	.-728    	; 0xfde <play_game+0x182>
    12b6:	8a 89       	ldd	r24, Y+18	; 0x12
    12b8:	8f 7d       	andi	r24, 0xDF	; 223
    12ba:	8c 34       	cpi	r24, 0x4C	; 76
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <play_game+0x464>
    12be:	87 ce       	rjmp	.-754    	; 0xfce <play_game+0x172>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    12c0:	19 8a       	std	Y+17, r1	; 0x11
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    12c2:	90 2f       	mov	r25, r16
    12c4:	8e ce       	rjmp	.-740    	; 0xfe2 <play_game+0x186>
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			paused = !paused;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <paused>
    12cc:	91 11       	cpse	r25, r1
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <paused>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    12d4:	19 8a       	std	Y+17, r1	; 0x11
    12d6:	cb ce       	rjmp	.-618    	; 0x106e <play_game+0x212>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
				// Attempt to move right
				move_frog_to_right();
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
    12d8:	8a 89       	ldd	r24, Y+18	; 0x12
    12da:	80 37       	cpi	r24, 0x70	; 112
    12dc:	a1 f3       	breq	.-24     	; 0x12c6 <play_game+0x46a>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    12de:	19 8a       	std	Y+17, r1	; 0x11
    12e0:	9c ce       	rjmp	.-712    	; 0x101a <play_game+0x1be>
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			paused = !paused;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <paused>
    12e8:	91 11       	cpse	r25, r1
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <paused>
    12f0:	be ce       	rjmp	.-644    	; 0x106e <play_game+0x212>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
				// Attempt to move right
				move_frog_to_right();
			} 
		}
		if(serial_input == 'p' || serial_input == 'P') {
    12f2:	9a 89       	ldd	r25, Y+18	; 0x12
    12f4:	90 35       	cpi	r25, 0x50	; 80
    12f6:	09 f0       	breq	.+2      	; 0x12fa <play_game+0x49e>
    12f8:	d8 ce       	rjmp	.-592    	; 0x10aa <play_game+0x24e>
    12fa:	f3 cf       	rjmp	.-26     	; 0x12e2 <play_game+0x486>
	// We get here if the frog is dead or the riverbank is full
	if(is_riverbank_full())
	{
		return;
	}
}
    12fc:	63 96       	adiw	r28, 0x13	; 19
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	7f 90       	pop	r7
    1322:	6f 90       	pop	r6
    1324:	5f 90       	pop	r5
    1326:	4f 90       	pop	r4
    1328:	3f 90       	pop	r3
    132a:	2f 90       	pop	r2
    132c:	08 95       	ret

0000132e <handle_next_level>:

}


void handle_next_level(void)
{
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	28 97       	sbiw	r28, 0x08	; 8
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	restart_count();
    1346:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <restart_count>
	level++;
    134a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <level>
	if(level > 1) {
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	10 f0       	brcs	.+4      	; 0x135c <handle_next_level+0x2e>
		add_lives();
    1358:	0e 94 1f 06 	call	0xc3e	; 0xc3e <add_lives>
	}
	
	if(level > 10)
    135c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    1360:	8b 30       	cpi	r24, 0x0B	; 11
    1362:	10 f0       	brcs	.+4      	; 0x1368 <handle_next_level+0x3a>
	{
		handle_game_completion();
    1364:	0e 94 bd 06 	call	0xd7a	; 0xd7a <handle_game_completion>
	}
	
	status_update();
    1368:	0e 94 f1 06 	call	0xde2	; 0xde2 <status_update>
	
	char str[8];
	sprintf(str, "LEVEL %i", level);
    136c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <level>
    1370:	1f 92       	push	r1
    1372:	8f 93       	push	r24
    1374:	8a e7       	ldi	r24, 0x7A	; 122
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	8e 01       	movw	r16, r28
    137e:	0f 5f       	subi	r16, 0xFF	; 255
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	1f 93       	push	r17
    1384:	0f 93       	push	r16
    1386:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <sprintf>
	set_scrolling_display_text(str,COLOUR_RED);
    138a:	6f e0       	ldi	r22, 0x0F	; 15
    138c:	c8 01       	movw	r24, r16
    138e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <set_scrolling_display_text>
	// Scroll the message until it has scrolled off the
	// display or a button is pushed
	while(scroll_display()) {
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <handle_next_level+0x88>
    13a0:	2f eb       	ldi	r18, 0xBF	; 191
    13a2:	84 ed       	ldi	r24, 0xD4	; 212
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	80 40       	sbci	r24, 0x00	; 0
    13aa:	90 40       	sbci	r25, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <handle_next_level+0x78>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <handle_next_level+0x82>
    13b0:	00 00       	nop
		_delay_ms(75);
		if(button_pushed() == NO_BUTTON_PUSHED) {
    13b2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <button_pushed>
	char str[8];
	sprintf(str, "LEVEL %i", level);
	set_scrolling_display_text(str,COLOUR_RED);
	// Scroll the message until it has scrolled off the
	// display or a button is pushed
	while(scroll_display()) {
    13b6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <scroll_display>
    13ba:	81 11       	cpse	r24, r1
    13bc:	f1 cf       	rjmp	.-30     	; 0x13a0 <handle_next_level+0x72>
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	89 e6       	ldi	r24, 0x69	; 105
    13c2:	98 e1       	ldi	r25, 0x18	; 24
    13c4:	21 50       	subi	r18, 0x01	; 1
    13c6:	80 40       	sbci	r24, 0x00	; 0
    13c8:	90 40       	sbci	r25, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <handle_next_level+0x96>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <handle_next_level+0xa0>
    13ce:	00 00       	nop
			;
		}
	}
	
	_delay_ms(1000);
	initialise_game();
    13d0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <initialise_game>
	
	
}
    13d4:	28 96       	adiw	r28, 0x08	; 8
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    13ea:	0e 94 29 06 	call	0xc52	; 0xc52 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    13ee:	0e 94 3a 06 	call	0xc74	; 0xc74 <splash_screen>
		new_game();
    13f2:	0e 94 73 06 	call	0xce6	; 0xce6 <new_game>
		while(!game_over_flag) {
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <main+0x28>
			if(no_lives_left()) 
    13f8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <no_lives_left>
    13fc:	81 11       	cpse	r24, r1
			{
				handle_game_over();
    13fe:	0e 94 82 06 	call	0xd04	; 0xd04 <handle_game_over>
			} 
			if(!no_lives_left()) 
    1402:	0e 94 ee 05 	call	0xbdc	; 0xbdc <no_lives_left>
    1406:	81 11       	cpse	r24, r1
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <main+0x28>
			{
				handle_next_level();
    140a:	0e 94 97 09 	call	0x132e	; 0x132e <handle_next_level>
				play_game();
    140e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <play_game>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
		new_game();
		while(!game_over_flag) {
    1412:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <game_over_flag>
    1416:	88 23       	and	r24, r24
    1418:	79 f3       	breq	.-34     	; 0x13f8 <main+0xe>
			
		}
	
	
	
}
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	08 95       	ret

00001420 <init_score>:
#include <stdio.h>

uint32_t score;

void init_score(void) {
	score = 0;
    1420:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <score>
    1424:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <score+0x1>
    1428:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <score+0x2>
    142c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <score+0x3>
    1430:	08 95       	ret

00001432 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1432:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <score>
    1436:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <score+0x1>
    143a:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <score+0x2>
    143e:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <score+0x3>
    1442:	48 0f       	add	r20, r24
    1444:	59 1f       	adc	r21, r25
    1446:	61 1d       	adc	r22, r1
    1448:	71 1d       	adc	r23, r1
    144a:	40 93 ab 01 	sts	0x01AB, r20	; 0x8001ab <score>
    144e:	50 93 ac 01 	sts	0x01AC, r21	; 0x8001ac <score+0x1>
    1452:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <score+0x2>
    1456:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <score+0x3>
	move_cursor(72, 1);
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	88 e4       	ldi	r24, 0x48	; 72
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 a2 0c 	call	0x1944	; 0x1944 <move_cursor>
	printf_P(PSTR("Score: %i"), get_score());
    1466:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <score+0x3>
    146a:	8f 93       	push	r24
    146c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <score+0x2>
    1470:	8f 93       	push	r24
    1472:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <score+0x1>
    1476:	8f 93       	push	r24
    1478:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <score>
    147c:	8f 93       	push	r24
    147e:	89 e7       	ldi	r24, 0x79	; 121
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	9f 93       	push	r25
    1484:	8f 93       	push	r24
    1486:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	08 95       	ret

00001498 <get_score>:

uint32_t get_score(void) {
	return score;
    1498:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <score>
    149c:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <score+0x1>
    14a0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <score+0x2>
    14a4:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <score+0x3>
}
    14a8:	08 95       	ret

000014aa <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    14aa:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <colour>
	display_string = string_to_display;
    14ae:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <display_string+0x1>
    14b2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <display_string>
	next_col_ptr = 0;
    14b6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <next_col_ptr+0x1>
    14ba:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <next_col_ptr>
	next_char_to_display = 0;
    14be:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <next_char_to_display+0x1>
    14c2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <next_char_to_display>
    14c6:	08 95       	ret

000014c8 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	28 97       	sbiw	r28, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    14e0:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <next_col_ptr>
    14e4:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <next_col_ptr+0x1>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	81 f0       	breq	.+32     	; 0x150c <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    14ec:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    14ee:	10 ff       	sbrs	r17, 0
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    14f2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <next_col_ptr+0x1>
    14f6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	6b c0       	rjmp	.+214    	; 0x15d4 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	f0 93 a1 01 	sts	0x01A1, r31	; 0x8001a1 <next_col_ptr+0x1>
    1504:	e0 93 a0 01 	sts	0x01A0, r30	; 0x8001a0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	64 c0       	rjmp	.+200    	; 0x15d4 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    150c:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <next_char_to_display>
    1510:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <next_char_to_display+0x1>
    1514:	30 97       	sbiw	r30, 0x00	; 0
    1516:	09 f4       	brne	.+2      	; 0x151a <scroll_display+0x52>
    1518:	49 c0       	rjmp	.+146    	; 0x15ac <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    151a:	cf 01       	movw	r24, r30
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <next_char_to_display+0x1>
    1522:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <next_char_to_display>
    1526:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1528:	e1 11       	cpse	r30, r1
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    152c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <next_char_to_display+0x1>
    1530:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <next_char_to_display>
			shift_countdown = 16;
    1534:	80 e1       	ldi	r24, 0x10	; 16
    1536:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    153a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    153c:	10 e0       	ldi	r17, 0x00	; 0
    153e:	4a c0       	rjmp	.+148    	; 0x15d4 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1540:	8f e9       	ldi	r24, 0x9F	; 159
    1542:	8e 0f       	add	r24, r30
    1544:	8a 31       	cpi	r24, 0x1A	; 26
    1546:	70 f4       	brcc	.+28     	; 0x1564 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	eb 52       	subi	r30, 0x2B	; 43
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	85 91       	lpm	r24, Z+
    1554:	94 91       	lpm	r25, Z
    1556:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <next_col_ptr+0x1>
    155a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    155e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	38 c0       	rjmp	.+112    	; 0x15d4 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1564:	8f eb       	ldi	r24, 0xBF	; 191
    1566:	8e 0f       	add	r24, r30
    1568:	8a 31       	cpi	r24, 0x1A	; 26
    156a:	70 f4       	brcc	.+28     	; 0x1588 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	ee 0f       	add	r30, r30
    1570:	ff 1f       	adc	r31, r31
    1572:	eb 5e       	subi	r30, 0xEB	; 235
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	85 91       	lpm	r24, Z+
    1578:	94 91       	lpm	r25, Z
    157a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <next_col_ptr+0x1>
    157e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1582:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	26 c0       	rjmp	.+76     	; 0x15d4 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1588:	80 ed       	ldi	r24, 0xD0	; 208
    158a:	8e 0f       	add	r24, r30
    158c:	8a 30       	cpi	r24, 0x0A	; 10
    158e:	00 f5       	brcc	.+64     	; 0x15d0 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ed 5d       	subi	r30, 0xDD	; 221
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	85 91       	lpm	r24, Z+
    159c:	94 91       	lpm	r25, Z
    159e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <next_col_ptr+0x1>
    15a2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15a6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    15ac:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <display_string>
    15b0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15b4:	01 e0       	ldi	r16, 0x01	; 1
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	09 f0       	breq	.+2      	; 0x15bc <scroll_display+0xf4>
    15ba:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    15bc:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <next_char_to_display+0x1>
    15c0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <next_char_to_display>
		display_string = 0;
    15c4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <display_string+0x1>
    15c8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15d0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15d2:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    15d4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    15d8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <colour>
    15dc:	fe 01       	movw	r30, r28
    15de:	38 96       	adiw	r30, 0x08	; 8
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    15e4:	11 23       	and	r17, r17
    15e6:	14 f4       	brge	.+4      	; 0x15ec <scroll_display+0x124>
			column_colour_data[i] = colour;
    15e8:	20 83       	st	Z, r18
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    15ec:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    15ee:	11 0f       	add	r17, r17
    15f0:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    15f2:	e8 17       	cp	r30, r24
    15f4:	f9 07       	cpc	r31, r25
    15f6:	b1 f7       	brne	.-20     	; 0x15e4 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    15f8:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    15fa:	be 01       	movw	r22, r28
    15fc:	6f 5f       	subi	r22, 0xFF	; 255
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f e0       	ldi	r24, 0x0F	; 15
    1602:	0e 94 c3 05 	call	0xb86	; 0xb86 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1606:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <shift_countdown.1854>
    160a:	88 23       	and	r24, r24
    160c:	89 f0       	breq	.+34     	; 0x1630 <scroll_display+0x168>
		shift_countdown--;
    160e:	81 50       	subi	r24, 0x01	; 1
    1610:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1614:	00 23       	and	r16, r16
    1616:	11 f0       	breq	.+4      	; 0x161c <scroll_display+0x154>
    1618:	88 23       	and	r24, r24
    161a:	11 f0       	breq	.+4      	; 0x1620 <scroll_display+0x158>
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <scroll_display+0x15e>
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <scroll_display+0x15e>
    1624:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	99 23       	and	r25, r25
    162a:	29 f0       	breq	.+10     	; 0x1636 <scroll_display+0x16e>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1630:	00 23       	and	r16, r16
    1632:	a1 f3       	breq	.-24     	; 0x161c <scroll_display+0x154>
    1634:	f7 cf       	rjmp	.-18     	; 0x1624 <scroll_display+0x15c>
	return !finished;
}
    1636:	28 96       	adiw	r28, 0x08	; 8
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    164c:	cf 93       	push	r28
    164e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1650:	8a 30       	cpi	r24, 0x0A	; 10
    1652:	19 f4       	brne	.+6      	; 0x165a <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1654:	8d e0       	ldi	r24, 0x0D	; 13
    1656:	0e 94 26 0b 	call	0x164c	; 0x164c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    165a:	9f b7       	in	r25, 0x3f	; 63
    165c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1660:	99 23       	and	r25, r25
    1662:	29 f1       	breq	.+74     	; 0x16ae <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1664:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	d1 f3       	breq	.-12     	; 0x1660 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    166c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    166e:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	8e 0f       	add	r24, r30
    1676:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <out_insert_pos>
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	ef 54       	subi	r30, 0x4F	; 79
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1682:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    168c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	11 f4       	brne	.+4      	; 0x1698 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1694:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1698:	e1 ec       	ldi	r30, 0xC1	; 193
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 62       	ori	r24, 0x20	; 32
    16a0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    16a2:	99 23       	and	r25, r25
    16a4:	39 f0       	breq	.+14     	; 0x16b4 <uart_put_char+0x68>
		sei();
    16a6:	78 94       	sei
	}
	return 0;
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
}
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    16bc:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    16c0:	88 23       	and	r24, r24
    16c2:	e1 f3       	breq	.-8      	; 0x16bc <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    16c4:	2f b7       	in	r18, 0x3f	; 63
    16c6:	20 78       	andi	r18, 0x80	; 128
	cli();
    16c8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    16ca:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
    16ce:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	83 1b       	sub	r24, r19
    16d6:	91 09       	sbc	r25, r1
    16d8:	5a f4       	brpl	.+22     	; 0x16f0 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    16da:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
    16de:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	e8 1b       	sub	r30, r24
    16e6:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    16e8:	ef 53       	subi	r30, 0x3F	; 63
    16ea:	fd 4f       	sbci	r31, 0xFD	; 253
    16ec:	80 81       	ld	r24, Z
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    16f0:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
    16f4:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	e8 1b       	sub	r30, r24
    16fc:	f1 09       	sbc	r31, r1
    16fe:	ef 54       	subi	r30, 0x4F	; 79
    1700:	fd 4f       	sbci	r31, 0xFD	; 253
    1702:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1704:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    1708:	91 50       	subi	r25, 0x01	; 1
    170a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    170e:	22 23       	and	r18, r18
    1710:	09 f0       	breq	.+2      	; 0x1714 <uart_get_char+0x58>
		sei();
    1712:	78 94       	sei
	}	
	return c;
}
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	08 95       	ret

00001718 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1718:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <out_insert_pos>
	bytes_in_out_buffer = 0;
    171c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1720:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1724:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
	input_overrun = 0;
    1728:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    172c:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	aa 1f       	adc	r26, r26
    173a:	bb 1f       	adc	r27, r27
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	9c 01       	movw	r18, r24
    1746:	ad 01       	movw	r20, r26
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	44 1f       	adc	r20, r20
    174e:	55 1f       	adc	r21, r21
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	72 e1       	ldi	r23, 0x12	; 18
    1754:	8a e7       	ldi	r24, 0x7A	; 122
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__divmodsi4>
    175c:	ba 01       	movw	r22, r20
    175e:	a9 01       	movw	r20, r18
    1760:	4f 5f       	subi	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	6f 4f       	sbci	r22, 0xFF	; 255
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	db 01       	movw	r26, r22
    176a:	ca 01       	movw	r24, r20
    176c:	1a f4       	brpl	.+6      	; 0x1774 <init_serial_stdio+0x5c>
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	a1 1d       	adc	r26, r1
    1772:	b1 1d       	adc	r27, r1
    1774:	b5 95       	asr	r27
    1776:	a7 95       	ror	r26
    1778:	97 95       	ror	r25
    177a:	87 95       	ror	r24
    177c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    177e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1782:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1786:	e1 ec       	ldi	r30, 0xC1	; 193
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	88 e1       	ldi	r24, 0x18	; 24
    178c:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    178e:	80 81       	ld	r24, Z
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1794:	e3 ec       	ldi	r30, 0xC3	; 195
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	93 83       	std	Z+3, r25	; 0x03
    179e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	08 95       	ret

000017a6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    17a6:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	91 11       	cpse	r25, r1
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <serial_input_available+0xc>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
}
    17b2:	08 95       	ret

000017b4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    17b4:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
	bytes_in_input_buffer = 0;
    17b8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bytes_in_input_buffer>
    17bc:	08 95       	ret

000017be <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	2f 93       	push	r18
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    17d2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    17d6:	88 23       	and	r24, r24
    17d8:	29 f1       	breq	.+74     	; 0x1824 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    17da:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <out_insert_pos>
    17de:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	82 1b       	sub	r24, r18
    17e6:	91 09       	sbc	r25, r1
    17e8:	5a f4       	brpl	.+22     	; 0x1800 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    17ea:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
    17ee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	e8 1b       	sub	r30, r24
    17f6:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    17f8:	e0 55       	subi	r30, 0x50	; 80
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	90 81       	ld	r25, Z
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1800:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <out_insert_pos>
    1804:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	e8 1b       	sub	r30, r24
    180c:	f1 09       	sbc	r31, r1
    180e:	ef 54       	subi	r30, 0x4F	; 79
    1810:	fe 4f       	sbci	r31, 0xFE	; 254
    1812:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1814:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    181e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1824:	e1 ec       	ldi	r30, 0xC1	; 193
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 7d       	andi	r24, 0xDF	; 223
    182c:	80 83       	st	Z, r24
	}
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	9f 91       	pop	r25
    1834:	8f 91       	pop	r24
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	cf 93       	push	r28
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1866:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    186a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <do_echo>
    186e:	88 23       	and	r24, r24
    1870:	49 f0       	breq	.+18     	; 0x1884 <__vector_20+0x42>
    1872:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <bytes_in_out_buffer>
    1876:	8f 3f       	cpi	r24, 0xFF	; 255
    1878:	29 f0       	breq	.+10     	; 0x1884 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	8c 2f       	mov	r24, r28
    1880:	0e 94 26 0b 	call	0x164c	; 0x164c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1884:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    1888:	80 31       	cpi	r24, 0x10	; 16
    188a:	20 f0       	brcs	.+8      	; 0x1894 <__vector_20+0x52>
		input_overrun = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <input_overrun>
    1892:	18 c0       	rjmp	.+48     	; 0x18c4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1894:	cd 30       	cpi	r28, 0x0D	; 13
    1896:	09 f4       	brne	.+2      	; 0x189a <__vector_20+0x58>
			c = '\n';
    1898:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    189a:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <input_insert_pos>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	8e 0f       	add	r24, r30
    18a2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <input_insert_pos>
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	ef 54       	subi	r30, 0x4F	; 79
    18aa:	fd 4f       	sbci	r31, 0xFD	; 253
    18ac:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    18ae:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bytes_in_input_buffer>
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    18b8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <input_insert_pos>
    18bc:	80 31       	cpi	r24, 0x10	; 16
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    18c0:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <input_insert_pos>
		}
	}
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	cf 91       	pop	r28
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    18e8:	94 b1       	in	r25, 0x04	; 4
    18ea:	90 6b       	ori	r25, 0xB0	; 176
    18ec:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    18ee:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    18f0:	90 e5       	ldi	r25, 0x50	; 80
    18f2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    18f4:	88 30       	cpi	r24, 0x08	; 8
    18f6:	21 f0       	breq	.+8      	; 0x1900 <spi_setup_master+0x18>
    18f8:	80 32       	cpi	r24, 0x20	; 32
    18fa:	11 f0       	breq	.+4      	; 0x1900 <spi_setup_master+0x18>
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	19 f4       	brne	.+6      	; 0x1906 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	9d bd       	out	0x2d, r25	; 45
			break;
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1906:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1908:	80 32       	cpi	r24, 0x20	; 32
    190a:	69 f0       	breq	.+26     	; 0x1926 <spi_setup_master+0x3e>
    190c:	28 f4       	brcc	.+10     	; 0x1918 <spi_setup_master+0x30>
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	71 f0       	breq	.+28     	; 0x192e <spi_setup_master+0x46>
    1912:	80 31       	cpi	r24, 0x10	; 16
    1914:	61 f0       	breq	.+24     	; 0x192e <spi_setup_master+0x46>
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <spi_setup_master+0x4c>
    1918:	80 34       	cpi	r24, 0x40	; 64
    191a:	29 f0       	breq	.+10     	; 0x1926 <spi_setup_master+0x3e>
    191c:	80 38       	cpi	r24, 0x80	; 128
    191e:	51 f4       	brne	.+20     	; 0x1934 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1920:	8c b5       	in	r24, 0x2c	; 44
    1922:	81 60       	ori	r24, 0x01	; 1
    1924:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1926:	8c b5       	in	r24, 0x2c	; 44
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	8c bd       	out	0x2c, r24	; 44
			break;
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    192e:	8c b5       	in	r24, 0x2c	; 44
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1934:	2c 98       	cbi	0x05, 4	; 5
    1936:	08 95       	ret

00001938 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1938:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    193a:	0d b4       	in	r0, 0x2d	; 45
    193c:	07 fe       	sbrs	r0, 7
    193e:	fd cf       	rjmp	.-6      	; 0x193a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1940:	8e b5       	in	r24, 0x2e	; 46
    1942:	08 95       	ret

00001944 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1944:	9f 93       	push	r25
    1946:	8f 93       	push	r24
    1948:	7f 93       	push	r23
    194a:	6f 93       	push	r22
    194c:	81 e7       	ldi	r24, 0x71	; 113
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	08 95       	ret

00001966 <normal_display_mode>:
    1966:	8c e6       	ldi	r24, 0x6C	; 108
    1968:	92 e0       	ldi	r25, 0x02	; 2
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	08 95       	ret

00001978 <clear_terminal>:
    1978:	87 e6       	ldi	r24, 0x67	; 103
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	9f 93       	push	r25
    197e:	8f 93       	push	r24
    1980:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	08 95       	ret

0000198a <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    198a:	1f 92       	push	r1
    198c:	8f 93       	push	r24
    198e:	81 e6       	ldi	r24, 0x61	; 97
    1990:	92 e0       	ldi	r25, 0x02	; 2
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <printf_P>
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	08 95       	ret

000019a4 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    19a4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <clockTicks>
    19a8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <clockTicks+0x1>
    19ac:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <clockTicks+0x2>
    19b0:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    19b4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    19b6:	8c e7       	ldi	r24, 0x7C	; 124
    19b8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    19c2:	ee e6       	ldi	r30, 0x6E	; 110
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	82 60       	ori	r24, 0x02	; 2
    19ca:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    19cc:	85 b3       	in	r24, 0x15	; 21
    19ce:	82 70       	andi	r24, 0x02	; 2
    19d0:	85 bb       	out	0x15, r24	; 21
    19d2:	08 95       	ret

000019d4 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    19d4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    19d6:	f8 94       	cli
	returnValue = clockTicks;
    19d8:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <clockTicks>
    19dc:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <clockTicks+0x1>
    19e0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <clockTicks+0x2>
    19e4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <clockTicks+0x3>
	if(interruptsOn) {
    19e8:	22 23       	and	r18, r18
    19ea:	0c f4       	brge	.+2      	; 0x19ee <get_current_time+0x1a>
		sei();
    19ec:	78 94       	sei
	}
	return returnValue;
}
    19ee:	08 95       	ret

000019f0 <init_seven_seg>:

void init_seven_seg(void)
{
	DDRC = 0xFF;
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<DDRD2);
    19f4:	52 9a       	sbi	0x0a, 2	; 10
	count = 0;
    19f6:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <count+0x1>
    19fa:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <count>
	start = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <start>
    1a04:	08 95       	ret

00001a06 <set_count>:
}


void set_count(uint8_t start) {
	count = start*1000;
    1a06:	28 ee       	ldi	r18, 0xE8	; 232
    1a08:	33 e0       	ldi	r19, 0x03	; 3
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	42 9f       	mul	r20, r18
    1a0e:	c0 01       	movw	r24, r0
    1a10:	43 9f       	mul	r20, r19
    1a12:	90 0d       	add	r25, r0
    1a14:	11 24       	eor	r1, r1
    1a16:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <count+0x1>
    1a1a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <count>
    1a1e:	08 95       	ret

00001a20 <restart_count>:
}

void restart_count(void)
{
	count = 0;
    1a20:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <count+0x1>
    1a24:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <count>
    1a28:	08 95       	ret

00001a2a <start_counter>:
}

void start_counter(void){
	start = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <start>
    1a30:	08 95       	ret

00001a32 <stop_counter>:
}

void stop_counter(void)
{
	start = 0;
    1a32:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <start>
    1a36:	08 95       	ret

00001a38 <is_count_over>:
}


uint8_t is_count_over(void)
{
	return (count == 0);
    1a38:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <count>
    1a3c:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <count+0x1>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	23 2b       	or	r18, r19
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <is_count_over+0x10>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
}
    1a48:	08 95       	ret

00001a4a <__vector_16>:
ISR(TIMER0_COMPA_vect) {
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
	/* Increment our clock tick count */
	
	if(start)
    1a6c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <start>
    1a70:	88 23       	and	r24, r24
    1a72:	99 f0       	breq	.+38     	; 0x1a9a <__vector_16+0x50>
	{
		clockTicks++;
    1a74:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <clockTicks>
    1a78:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <clockTicks+0x1>
    1a7c:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <clockTicks+0x2>
    1a80:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <clockTicks+0x3>
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	a1 1d       	adc	r26, r1
    1a88:	b1 1d       	adc	r27, r1
    1a8a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <clockTicks>
    1a8e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <clockTicks+0x1>
    1a92:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <clockTicks+0x2>
    1a96:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <clockTicks+0x3>
	}
	if(start)
    1a9a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <start>
    1a9e:	88 23       	and	r24, r24
    1aa0:	79 f0       	breq	.+30     	; 0x1ac0 <__vector_16+0x76>
	{
		if(count > 0) {
    1aa2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1aa6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1aaa:	89 2b       	or	r24, r25
    1aac:	49 f0       	breq	.+18     	; 0x1ac0 <__vector_16+0x76>
			count--;
    1aae:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1ab2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <count+0x1>
    1abc:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <count>
	}
	/* Change which digit will be displayed. If last time was
	** left, now display right. If last time was right, now 
	** display left.
	*/
	seven_seg_cc = 1^seven_seg_cc;
    1ac0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <seven_seg_cc>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 27       	eor	r24, r25
    1ac8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <seven_seg_cc>
	
	if(count > 0) {
    1acc:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1ad0:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1ad4:	89 2b       	or	r24, r25
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <__vector_16+0x90>
    1ad8:	9f c0       	rjmp	.+318    	; 0x1c18 <__vector_16+0x1ce>
		uint16_t index = count + 1000;
    1ada:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <count>
    1ade:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <count+0x1>
    1ae2:	28 51       	subi	r18, 0x18	; 24
    1ae4:	3c 4f       	sbci	r19, 0xFC	; 252
		// Section where more than 10 sec
		if(seven_seg_cc == 0) {
    1ae6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <seven_seg_cc>
    1aea:	81 11       	cpse	r24, r1
    1aec:	5f c0       	rjmp	.+190    	; 0x1bac <__vector_16+0x162>
			if (count > 1000)
    1aee:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1af2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1af6:	89 3e       	cpi	r24, 0xE9	; 233
    1af8:	93 40       	sbci	r25, 0x03	; 3
    1afa:	78 f1       	brcs	.+94     	; 0x1b5a <__vector_16+0x110>
			{
				PORTC = seven_seg_data[(index/1000)%10];
    1afc:	36 95       	lsr	r19
    1afe:	27 95       	ror	r18
    1b00:	36 95       	lsr	r19
    1b02:	27 95       	ror	r18
    1b04:	36 95       	lsr	r19
    1b06:	27 95       	ror	r18
    1b08:	a5 ec       	ldi	r26, 0xC5	; 197
    1b0a:	b0 e2       	ldi	r27, 0x20	; 32
    1b0c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__umulhisi3>
    1b10:	ac 01       	movw	r20, r24
    1b12:	52 95       	swap	r21
    1b14:	42 95       	swap	r20
    1b16:	4f 70       	andi	r20, 0x0F	; 15
    1b18:	45 27       	eor	r20, r21
    1b1a:	5f 70       	andi	r21, 0x0F	; 15
    1b1c:	45 27       	eor	r20, r21
    1b1e:	9a 01       	movw	r18, r20
    1b20:	ad ec       	ldi	r26, 0xCD	; 205
    1b22:	bc ec       	ldi	r27, 0xCC	; 204
    1b24:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__umulhisi3>
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	96 95       	lsr	r25
    1b2e:	87 95       	ror	r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	9c 01       	movw	r18, r24
    1b36:	22 0f       	add	r18, r18
    1b38:	33 1f       	adc	r19, r19
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	82 0f       	add	r24, r18
    1b48:	93 1f       	adc	r25, r19
    1b4a:	48 1b       	sub	r20, r24
    1b4c:	59 0b       	sbc	r21, r25
    1b4e:	fa 01       	movw	r30, r20
    1b50:	eb 5e       	subi	r30, 0xEB	; 235
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	80 81       	ld	r24, Z
    1b56:	88 b9       	out	0x08, r24	; 8
    1b58:	57 c0       	rjmp	.+174    	; 0x1c08 <__vector_16+0x1be>
			}
			else
			{
				PORTC = seven_seg_data[(index/100)%10];
    1b5a:	36 95       	lsr	r19
    1b5c:	27 95       	ror	r18
    1b5e:	36 95       	lsr	r19
    1b60:	27 95       	ror	r18
    1b62:	ab e7       	ldi	r26, 0x7B	; 123
    1b64:	b4 e1       	ldi	r27, 0x14	; 20
    1b66:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__umulhisi3>
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	56 95       	lsr	r21
    1b6e:	47 95       	ror	r20
    1b70:	9a 01       	movw	r18, r20
    1b72:	ad ec       	ldi	r26, 0xCD	; 205
    1b74:	bc ec       	ldi	r27, 0xCC	; 204
    1b76:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__umulhisi3>
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	96 95       	lsr	r25
    1b80:	87 95       	ror	r24
    1b82:	96 95       	lsr	r25
    1b84:	87 95       	ror	r24
    1b86:	9c 01       	movw	r18, r24
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	48 1b       	sub	r20, r24
    1b9e:	59 0b       	sbc	r21, r25
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	eb 5e       	subi	r30, 0xEB	; 235
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	80 81       	ld	r24, Z
    1ba8:	88 b9       	out	0x08, r24	; 8
    1baa:	2e c0       	rjmp	.+92     	; 0x1c08 <__vector_16+0x1be>
			}
			
		} 
		// Section where less than 9 sec
		else if(seven_seg_cc == 1)
    1bac:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <seven_seg_cc>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	51 f5       	brne	.+84     	; 0x1c08 <__vector_16+0x1be>
		{
			if (count > 9000) { 
    1bb4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1bb8:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1bbc:	89 32       	cpi	r24, 0x29	; 41
    1bbe:	93 42       	sbci	r25, 0x23	; 35
    1bc0:	b0 f0       	brcs	.+44     	; 0x1bee <__vector_16+0x1a4>
				PORTC = seven_seg_data[(index/10000)%10];
    1bc2:	32 95       	swap	r19
    1bc4:	22 95       	swap	r18
    1bc6:	2f 70       	andi	r18, 0x0F	; 15
    1bc8:	23 27       	eor	r18, r19
    1bca:	3f 70       	andi	r19, 0x0F	; 15
    1bcc:	23 27       	eor	r18, r19
    1bce:	a7 e4       	ldi	r26, 0x47	; 71
    1bd0:	b3 e0       	ldi	r27, 0x03	; 3
    1bd2:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__umulhisi3>
    1bd6:	96 95       	lsr	r25
    1bd8:	87 95       	ror	r24
    1bda:	96 95       	lsr	r25
    1bdc:	87 95       	ror	r24
    1bde:	96 95       	lsr	r25
    1be0:	87 95       	ror	r24
    1be2:	fc 01       	movw	r30, r24
    1be4:	eb 5e       	subi	r30, 0xEB	; 235
    1be6:	fe 4f       	sbci	r31, 0xFE	; 254
    1be8:	80 81       	ld	r24, Z
    1bea:	88 b9       	out	0x08, r24	; 8
    1bec:	0d c0       	rjmp	.+26     	; 0x1c08 <__vector_16+0x1be>
				} 
			// Section where less than 1 sec
			else if (count < 1000)
    1bee:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <count>
    1bf2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <count+0x1>
    1bf6:	88 3e       	cpi	r24, 0xE8	; 232
    1bf8:	93 40       	sbci	r25, 0x03	; 3
    1bfa:	28 f4       	brcc	.+10     	; 0x1c06 <__vector_16+0x1bc>
			{
					PORTC = seven_seg_data[0];
    1bfc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <seven_seg_data>
    1c00:	88 b9       	out	0x08, r24	; 8
					
					// Decimal Point
					PORTC |= (1 <<PORTC7);
    1c02:	47 9a       	sbi	0x08, 7	; 8
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <__vector_16+0x1be>
			}
			else 
			{
				PORTC = 0;
    1c06:	18 b8       	out	0x08, r1	; 8
			
			
		}
		
		/* Output the digit selection (CC) bit */
		if (seven_seg_cc) {
    1c08:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <seven_seg_cc>
    1c0c:	88 23       	and	r24, r24
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <__vector_16+0x1ca>
			PORTD |= (1 << PORTD2);
    1c10:	5a 9a       	sbi	0x0b, 2	; 11
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <__vector_16+0x1d0>
			} else {
			PORTD &= ~(1 << PORTD2);
    1c14:	5a 98       	cbi	0x0b, 2	; 11
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <__vector_16+0x1d0>
		}
		
	} else {
		/* No digits displayed -  display is blank */
		PORTC = 0;
    1c18:	18 b8       	out	0x08, r1	; 8
	}
	
	
			
}
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	7f 91       	pop	r23
    1c28:	6f 91       	pop	r22
    1c2a:	5f 91       	pop	r21
    1c2c:	4f 91       	pop	r20
    1c2e:	3f 91       	pop	r19
    1c30:	2f 91       	pop	r18
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__divmodsi4>:
    1c3c:	05 2e       	mov	r0, r21
    1c3e:	97 fb       	bst	r25, 7
    1c40:	1e f4       	brtc	.+6      	; 0x1c48 <__divmodsi4+0xc>
    1c42:	00 94       	com	r0
    1c44:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__negsi2>
    1c48:	57 fd       	sbrc	r21, 7
    1c4a:	07 d0       	rcall	.+14     	; 0x1c5a <__divmodsi4_neg2>
    1c4c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__udivmodsi4>
    1c50:	07 fc       	sbrc	r0, 7
    1c52:	03 d0       	rcall	.+6      	; 0x1c5a <__divmodsi4_neg2>
    1c54:	4e f4       	brtc	.+18     	; 0x1c68 <__divmodsi4_exit>
    1c56:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__negsi2>

00001c5a <__divmodsi4_neg2>:
    1c5a:	50 95       	com	r21
    1c5c:	40 95       	com	r20
    1c5e:	30 95       	com	r19
    1c60:	21 95       	neg	r18
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
    1c64:	4f 4f       	sbci	r20, 0xFF	; 255
    1c66:	5f 4f       	sbci	r21, 0xFF	; 255

00001c68 <__divmodsi4_exit>:
    1c68:	08 95       	ret

00001c6a <__negsi2>:
    1c6a:	90 95       	com	r25
    1c6c:	80 95       	com	r24
    1c6e:	70 95       	com	r23
    1c70:	61 95       	neg	r22
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	08 95       	ret

00001c7a <__tablejump2__>:
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	05 90       	lpm	r0, Z+
    1c80:	f4 91       	lpm	r31, Z
    1c82:	e0 2d       	mov	r30, r0
    1c84:	09 94       	ijmp

00001c86 <__umulhisi3>:
    1c86:	a2 9f       	mul	r26, r18
    1c88:	b0 01       	movw	r22, r0
    1c8a:	b3 9f       	mul	r27, r19
    1c8c:	c0 01       	movw	r24, r0
    1c8e:	a3 9f       	mul	r26, r19
    1c90:	70 0d       	add	r23, r0
    1c92:	81 1d       	adc	r24, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	91 1d       	adc	r25, r1
    1c98:	b2 9f       	mul	r27, r18
    1c9a:	70 0d       	add	r23, r0
    1c9c:	81 1d       	adc	r24, r1
    1c9e:	11 24       	eor	r1, r1
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	08 95       	ret

00001ca4 <__ashrdi3>:
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	10 f8       	bld	r1, 0

00001ca8 <__lshrdi3>:
    1ca8:	16 94       	lsr	r1
    1caa:	00 08       	sbc	r0, r0
    1cac:	0f 93       	push	r16
    1cae:	08 30       	cpi	r16, 0x08	; 8
    1cb0:	98 f0       	brcs	.+38     	; 0x1cd8 <__lshrdi3+0x30>
    1cb2:	08 50       	subi	r16, 0x08	; 8
    1cb4:	23 2f       	mov	r18, r19
    1cb6:	34 2f       	mov	r19, r20
    1cb8:	45 2f       	mov	r20, r21
    1cba:	56 2f       	mov	r21, r22
    1cbc:	67 2f       	mov	r22, r23
    1cbe:	78 2f       	mov	r23, r24
    1cc0:	89 2f       	mov	r24, r25
    1cc2:	90 2d       	mov	r25, r0
    1cc4:	f4 cf       	rjmp	.-24     	; 0x1cae <__lshrdi3+0x6>
    1cc6:	05 94       	asr	r0
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	77 95       	ror	r23
    1cce:	67 95       	ror	r22
    1cd0:	57 95       	ror	r21
    1cd2:	47 95       	ror	r20
    1cd4:	37 95       	ror	r19
    1cd6:	27 95       	ror	r18
    1cd8:	0a 95       	dec	r16
    1cda:	aa f7       	brpl	.-22     	; 0x1cc6 <__lshrdi3+0x1e>
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <__cmpdi2_s8>:
    1ce0:	00 24       	eor	r0, r0
    1ce2:	a7 fd       	sbrc	r26, 7
    1ce4:	00 94       	com	r0
    1ce6:	2a 17       	cp	r18, r26
    1ce8:	30 05       	cpc	r19, r0
    1cea:	40 05       	cpc	r20, r0
    1cec:	50 05       	cpc	r21, r0
    1cee:	60 05       	cpc	r22, r0
    1cf0:	70 05       	cpc	r23, r0
    1cf2:	80 05       	cpc	r24, r0
    1cf4:	90 05       	cpc	r25, r0
    1cf6:	08 95       	ret

00001cf8 <__udivmodsi4>:
    1cf8:	a1 e2       	ldi	r26, 0x21	; 33
    1cfa:	1a 2e       	mov	r1, r26
    1cfc:	aa 1b       	sub	r26, r26
    1cfe:	bb 1b       	sub	r27, r27
    1d00:	fd 01       	movw	r30, r26
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <__udivmodsi4_ep>

00001d04 <__udivmodsi4_loop>:
    1d04:	aa 1f       	adc	r26, r26
    1d06:	bb 1f       	adc	r27, r27
    1d08:	ee 1f       	adc	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	a2 17       	cp	r26, r18
    1d0e:	b3 07       	cpc	r27, r19
    1d10:	e4 07       	cpc	r30, r20
    1d12:	f5 07       	cpc	r31, r21
    1d14:	20 f0       	brcs	.+8      	; 0x1d1e <__udivmodsi4_ep>
    1d16:	a2 1b       	sub	r26, r18
    1d18:	b3 0b       	sbc	r27, r19
    1d1a:	e4 0b       	sbc	r30, r20
    1d1c:	f5 0b       	sbc	r31, r21

00001d1e <__udivmodsi4_ep>:
    1d1e:	66 1f       	adc	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	88 1f       	adc	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	1a 94       	dec	r1
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <__udivmodsi4_loop>
    1d2a:	60 95       	com	r22
    1d2c:	70 95       	com	r23
    1d2e:	80 95       	com	r24
    1d30:	90 95       	com	r25
    1d32:	9b 01       	movw	r18, r22
    1d34:	ac 01       	movw	r20, r24
    1d36:	bd 01       	movw	r22, r26
    1d38:	cf 01       	movw	r24, r30
    1d3a:	08 95       	ret

00001d3c <fgetc>:
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	ec 01       	movw	r28, r24
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	20 ff       	sbrs	r18, 0
    1d46:	33 c0       	rjmp	.+102    	; 0x1dae <fgetc+0x72>
    1d48:	26 ff       	sbrs	r18, 6
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <fgetc+0x24>
    1d4c:	2f 7b       	andi	r18, 0xBF	; 191
    1d4e:	2b 83       	std	Y+3, r18	; 0x03
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	9f 83       	std	Y+7, r25	; 0x07
    1d58:	8e 83       	std	Y+6, r24	; 0x06
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	29 c0       	rjmp	.+82     	; 0x1db2 <fgetc+0x76>
    1d60:	22 ff       	sbrs	r18, 2
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <fgetc+0x46>
    1d64:	e8 81       	ld	r30, Y
    1d66:	f9 81       	ldd	r31, Y+1	; 0x01
    1d68:	80 81       	ld	r24, Z
    1d6a:	08 2e       	mov	r0, r24
    1d6c:	00 0c       	add	r0, r0
    1d6e:	99 0b       	sbc	r25, r25
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <fgetc+0x3e>
    1d74:	20 62       	ori	r18, 0x20	; 32
    1d76:	2b 83       	std	Y+3, r18	; 0x03
    1d78:	1a c0       	rjmp	.+52     	; 0x1dae <fgetc+0x72>
    1d7a:	31 96       	adiw	r30, 0x01	; 1
    1d7c:	f9 83       	std	Y+1, r31	; 0x01
    1d7e:	e8 83       	st	Y, r30
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <fgetc+0x62>
    1d82:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d84:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d86:	09 95       	icall
    1d88:	97 ff       	sbrs	r25, 7
    1d8a:	09 c0       	rjmp	.+18     	; 0x1d9e <fgetc+0x62>
    1d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	11 f0       	breq	.+4      	; 0x1d96 <fgetc+0x5a>
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <fgetc+0x5c>
    1d96:	80 e1       	ldi	r24, 0x10	; 16
    1d98:	82 2b       	or	r24, r18
    1d9a:	8b 83       	std	Y+3, r24	; 0x03
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <fgetc+0x72>
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	3f 83       	std	Y+7, r19	; 0x07
    1da8:	2e 83       	std	Y+6, r18	; 0x06
    1daa:	99 27       	eor	r25, r25
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <fgetc+0x76>
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	9f ef       	ldi	r25, 0xFF	; 255
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <printf>:
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__prologue_saves__+0x20>
    1dc4:	ae 01       	movw	r20, r28
    1dc6:	4b 5f       	subi	r20, 0xFB	; 251
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	fa 01       	movw	r30, r20
    1dcc:	61 91       	ld	r22, Z+
    1dce:	71 91       	ld	r23, Z+
    1dd0:	af 01       	movw	r20, r30
    1dd2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__iob+0x2>
    1dd6:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <__iob+0x3>
    1dda:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vfprintf>
    1dde:	e2 e0       	ldi	r30, 0x02	; 2
    1de0:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__epilogue_restores__+0x20>

00001de4 <printf_P>:
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 ef       	ldi	r30, 0xF8	; 248
    1dea:	fe e0       	ldi	r31, 0x0E	; 14
    1dec:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x1c>
    1df0:	ae 01       	movw	r20, r28
    1df2:	49 5f       	subi	r20, 0xF9	; 249
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	da 01       	movw	r26, r20
    1df8:	6d 91       	ld	r22, X+
    1dfa:	7d 91       	ld	r23, X+
    1dfc:	ad 01       	movw	r20, r26
    1dfe:	03 ec       	ldi	r16, 0xC3	; 195
    1e00:	12 e0       	ldi	r17, 0x02	; 2
    1e02:	f8 01       	movw	r30, r16
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	dc 01       	movw	r26, r24
    1e0a:	13 96       	adiw	r26, 0x03	; 3
    1e0c:	2c 91       	ld	r18, X
    1e0e:	13 97       	sbiw	r26, 0x03	; 3
    1e10:	28 60       	ori	r18, 0x08	; 8
    1e12:	13 96       	adiw	r26, 0x03	; 3
    1e14:	2c 93       	st	X, r18
    1e16:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vfprintf>
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	12 96       	adiw	r26, 0x02	; 2
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	13 97       	sbiw	r26, 0x03	; 3
    1e24:	23 81       	ldd	r18, Z+3	; 0x03
    1e26:	27 7f       	andi	r18, 0xF7	; 247
    1e28:	23 83       	std	Z+3, r18	; 0x03
    1e2a:	e4 e0       	ldi	r30, 0x04	; 4
    1e2c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x1c>

00001e30 <sprintf>:
    1e30:	ae e0       	ldi	r26, 0x0E	; 14
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ee e1       	ldi	r30, 0x1E	; 30
    1e36:	ff e0       	ldi	r31, 0x0F	; 15
    1e38:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__prologue_saves__+0x1c>
    1e3c:	0d 89       	ldd	r16, Y+21	; 0x15
    1e3e:	1e 89       	ldd	r17, Y+22	; 0x16
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	8c 83       	std	Y+4, r24	; 0x04
    1e44:	1a 83       	std	Y+2, r17	; 0x02
    1e46:	09 83       	std	Y+1, r16	; 0x01
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f e7       	ldi	r25, 0x7F	; 127
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	ae 01       	movw	r20, r28
    1e52:	47 5e       	subi	r20, 0xE7	; 231
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	6f 89       	ldd	r22, Y+23	; 0x17
    1e58:	78 8d       	ldd	r23, Y+24	; 0x18
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vfprintf>
    1e62:	ef 81       	ldd	r30, Y+7	; 0x07
    1e64:	f8 85       	ldd	r31, Y+8	; 0x08
    1e66:	e0 0f       	add	r30, r16
    1e68:	f1 1f       	adc	r31, r17
    1e6a:	10 82       	st	Z, r1
    1e6c:	2e 96       	adiw	r28, 0x0e	; 14
    1e6e:	e4 e0       	ldi	r30, 0x04	; 4
    1e70:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__epilogue_restores__+0x1c>

00001e74 <vfprintf>:
    1e74:	ab e0       	ldi	r26, 0x0B	; 11
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e4       	ldi	r30, 0x40	; 64
    1e7a:	ff e0       	ldi	r31, 0x0F	; 15
    1e7c:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__>
    1e80:	6c 01       	movw	r12, r24
    1e82:	7b 01       	movw	r14, r22
    1e84:	8a 01       	movw	r16, r20
    1e86:	fc 01       	movw	r30, r24
    1e88:	17 82       	std	Z+7, r1	; 0x07
    1e8a:	16 82       	std	Z+6, r1	; 0x06
    1e8c:	83 81       	ldd	r24, Z+3	; 0x03
    1e8e:	81 ff       	sbrs	r24, 1
    1e90:	cc c1       	rjmp	.+920    	; 0x222a <vfprintf+0x3b6>
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	3c 01       	movw	r6, r24
    1e98:	f6 01       	movw	r30, r12
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	f7 01       	movw	r30, r14
    1e9e:	93 fd       	sbrc	r25, 3
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	93 ff       	sbrs	r25, 3
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	7f 01       	movw	r14, r30
    1ea8:	88 23       	and	r24, r24
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <vfprintf+0x3a>
    1eac:	ba c1       	rjmp	.+884    	; 0x2222 <vfprintf+0x3ae>
    1eae:	85 32       	cpi	r24, 0x25	; 37
    1eb0:	39 f4       	brne	.+14     	; 0x1ec0 <vfprintf+0x4c>
    1eb2:	93 fd       	sbrc	r25, 3
    1eb4:	85 91       	lpm	r24, Z+
    1eb6:	93 ff       	sbrs	r25, 3
    1eb8:	81 91       	ld	r24, Z+
    1eba:	7f 01       	movw	r14, r30
    1ebc:	85 32       	cpi	r24, 0x25	; 37
    1ebe:	29 f4       	brne	.+10     	; 0x1eca <vfprintf+0x56>
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    1ec8:	e7 cf       	rjmp	.-50     	; 0x1e98 <vfprintf+0x24>
    1eca:	91 2c       	mov	r9, r1
    1ecc:	21 2c       	mov	r2, r1
    1ece:	31 2c       	mov	r3, r1
    1ed0:	ff e1       	ldi	r31, 0x1F	; 31
    1ed2:	f3 15       	cp	r31, r3
    1ed4:	d8 f0       	brcs	.+54     	; 0x1f0c <vfprintf+0x98>
    1ed6:	8b 32       	cpi	r24, 0x2B	; 43
    1ed8:	79 f0       	breq	.+30     	; 0x1ef8 <vfprintf+0x84>
    1eda:	38 f4       	brcc	.+14     	; 0x1eea <vfprintf+0x76>
    1edc:	80 32       	cpi	r24, 0x20	; 32
    1ede:	79 f0       	breq	.+30     	; 0x1efe <vfprintf+0x8a>
    1ee0:	83 32       	cpi	r24, 0x23	; 35
    1ee2:	a1 f4       	brne	.+40     	; 0x1f0c <vfprintf+0x98>
    1ee4:	23 2d       	mov	r18, r3
    1ee6:	20 61       	ori	r18, 0x10	; 16
    1ee8:	1d c0       	rjmp	.+58     	; 0x1f24 <vfprintf+0xb0>
    1eea:	8d 32       	cpi	r24, 0x2D	; 45
    1eec:	61 f0       	breq	.+24     	; 0x1f06 <vfprintf+0x92>
    1eee:	80 33       	cpi	r24, 0x30	; 48
    1ef0:	69 f4       	brne	.+26     	; 0x1f0c <vfprintf+0x98>
    1ef2:	23 2d       	mov	r18, r3
    1ef4:	21 60       	ori	r18, 0x01	; 1
    1ef6:	16 c0       	rjmp	.+44     	; 0x1f24 <vfprintf+0xb0>
    1ef8:	83 2d       	mov	r24, r3
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	38 2e       	mov	r3, r24
    1efe:	e3 2d       	mov	r30, r3
    1f00:	e4 60       	ori	r30, 0x04	; 4
    1f02:	3e 2e       	mov	r3, r30
    1f04:	2a c0       	rjmp	.+84     	; 0x1f5a <vfprintf+0xe6>
    1f06:	f3 2d       	mov	r31, r3
    1f08:	f8 60       	ori	r31, 0x08	; 8
    1f0a:	1d c0       	rjmp	.+58     	; 0x1f46 <vfprintf+0xd2>
    1f0c:	37 fc       	sbrc	r3, 7
    1f0e:	2d c0       	rjmp	.+90     	; 0x1f6a <vfprintf+0xf6>
    1f10:	20 ed       	ldi	r18, 0xD0	; 208
    1f12:	28 0f       	add	r18, r24
    1f14:	2a 30       	cpi	r18, 0x0A	; 10
    1f16:	40 f0       	brcs	.+16     	; 0x1f28 <vfprintf+0xb4>
    1f18:	8e 32       	cpi	r24, 0x2E	; 46
    1f1a:	b9 f4       	brne	.+46     	; 0x1f4a <vfprintf+0xd6>
    1f1c:	36 fc       	sbrc	r3, 6
    1f1e:	81 c1       	rjmp	.+770    	; 0x2222 <vfprintf+0x3ae>
    1f20:	23 2d       	mov	r18, r3
    1f22:	20 64       	ori	r18, 0x40	; 64
    1f24:	32 2e       	mov	r3, r18
    1f26:	19 c0       	rjmp	.+50     	; 0x1f5a <vfprintf+0xe6>
    1f28:	36 fe       	sbrs	r3, 6
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <vfprintf+0xc4>
    1f2c:	8a e0       	ldi	r24, 0x0A	; 10
    1f2e:	98 9e       	mul	r9, r24
    1f30:	20 0d       	add	r18, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	92 2e       	mov	r9, r18
    1f36:	11 c0       	rjmp	.+34     	; 0x1f5a <vfprintf+0xe6>
    1f38:	ea e0       	ldi	r30, 0x0A	; 10
    1f3a:	2e 9e       	mul	r2, r30
    1f3c:	20 0d       	add	r18, r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	22 2e       	mov	r2, r18
    1f42:	f3 2d       	mov	r31, r3
    1f44:	f0 62       	ori	r31, 0x20	; 32
    1f46:	3f 2e       	mov	r3, r31
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <vfprintf+0xe6>
    1f4a:	8c 36       	cpi	r24, 0x6C	; 108
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <vfprintf+0xe2>
    1f4e:	83 2d       	mov	r24, r3
    1f50:	80 68       	ori	r24, 0x80	; 128
    1f52:	38 2e       	mov	r3, r24
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <vfprintf+0xe6>
    1f56:	88 36       	cpi	r24, 0x68	; 104
    1f58:	41 f4       	brne	.+16     	; 0x1f6a <vfprintf+0xf6>
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	93 fd       	sbrc	r25, 3
    1f5e:	85 91       	lpm	r24, Z+
    1f60:	93 ff       	sbrs	r25, 3
    1f62:	81 91       	ld	r24, Z+
    1f64:	7f 01       	movw	r14, r30
    1f66:	81 11       	cpse	r24, r1
    1f68:	b3 cf       	rjmp	.-154    	; 0x1ed0 <vfprintf+0x5c>
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	9f 7d       	andi	r25, 0xDF	; 223
    1f6e:	95 54       	subi	r25, 0x45	; 69
    1f70:	93 30       	cpi	r25, 0x03	; 3
    1f72:	28 f4       	brcc	.+10     	; 0x1f7e <vfprintf+0x10a>
    1f74:	0c 5f       	subi	r16, 0xFC	; 252
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	9f e3       	ldi	r25, 0x3F	; 63
    1f7a:	99 83       	std	Y+1, r25	; 0x01
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <vfprintf+0x124>
    1f7e:	83 36       	cpi	r24, 0x63	; 99
    1f80:	31 f0       	breq	.+12     	; 0x1f8e <vfprintf+0x11a>
    1f82:	83 37       	cpi	r24, 0x73	; 115
    1f84:	71 f0       	breq	.+28     	; 0x1fa2 <vfprintf+0x12e>
    1f86:	83 35       	cpi	r24, 0x53	; 83
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <vfprintf+0x118>
    1f8a:	59 c0       	rjmp	.+178    	; 0x203e <vfprintf+0x1ca>
    1f8c:	21 c0       	rjmp	.+66     	; 0x1fd0 <vfprintf+0x15c>
    1f8e:	f8 01       	movw	r30, r16
    1f90:	80 81       	ld	r24, Z
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	0e 5f       	subi	r16, 0xFE	; 254
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	88 24       	eor	r8, r8
    1f9a:	83 94       	inc	r8
    1f9c:	91 2c       	mov	r9, r1
    1f9e:	53 01       	movw	r10, r6
    1fa0:	13 c0       	rjmp	.+38     	; 0x1fc8 <vfprintf+0x154>
    1fa2:	28 01       	movw	r4, r16
    1fa4:	f2 e0       	ldi	r31, 0x02	; 2
    1fa6:	4f 0e       	add	r4, r31
    1fa8:	51 1c       	adc	r5, r1
    1faa:	f8 01       	movw	r30, r16
    1fac:	a0 80       	ld	r10, Z
    1fae:	b1 80       	ldd	r11, Z+1	; 0x01
    1fb0:	36 fe       	sbrs	r3, 6
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <vfprintf+0x146>
    1fb4:	69 2d       	mov	r22, r9
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x14a>
    1fba:	6f ef       	ldi	r22, 0xFF	; 255
    1fbc:	7f ef       	ldi	r23, 0xFF	; 255
    1fbe:	c5 01       	movw	r24, r10
    1fc0:	0e 94 26 11 	call	0x224c	; 0x224c <strnlen>
    1fc4:	4c 01       	movw	r8, r24
    1fc6:	82 01       	movw	r16, r4
    1fc8:	f3 2d       	mov	r31, r3
    1fca:	ff 77       	andi	r31, 0x7F	; 127
    1fcc:	3f 2e       	mov	r3, r31
    1fce:	16 c0       	rjmp	.+44     	; 0x1ffc <vfprintf+0x188>
    1fd0:	28 01       	movw	r4, r16
    1fd2:	22 e0       	ldi	r18, 0x02	; 2
    1fd4:	42 0e       	add	r4, r18
    1fd6:	51 1c       	adc	r5, r1
    1fd8:	f8 01       	movw	r30, r16
    1fda:	a0 80       	ld	r10, Z
    1fdc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fde:	36 fe       	sbrs	r3, 6
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <vfprintf+0x174>
    1fe2:	69 2d       	mov	r22, r9
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vfprintf+0x178>
    1fe8:	6f ef       	ldi	r22, 0xFF	; 255
    1fea:	7f ef       	ldi	r23, 0xFF	; 255
    1fec:	c5 01       	movw	r24, r10
    1fee:	0e 94 1b 11 	call	0x2236	; 0x2236 <strnlen_P>
    1ff2:	4c 01       	movw	r8, r24
    1ff4:	f3 2d       	mov	r31, r3
    1ff6:	f0 68       	ori	r31, 0x80	; 128
    1ff8:	3f 2e       	mov	r3, r31
    1ffa:	82 01       	movw	r16, r4
    1ffc:	33 fc       	sbrc	r3, 3
    1ffe:	1b c0       	rjmp	.+54     	; 0x2036 <vfprintf+0x1c2>
    2000:	82 2d       	mov	r24, r2
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	88 16       	cp	r8, r24
    2006:	99 06       	cpc	r9, r25
    2008:	b0 f4       	brcc	.+44     	; 0x2036 <vfprintf+0x1c2>
    200a:	b6 01       	movw	r22, r12
    200c:	80 e2       	ldi	r24, 0x20	; 32
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    2014:	2a 94       	dec	r2
    2016:	f4 cf       	rjmp	.-24     	; 0x2000 <vfprintf+0x18c>
    2018:	f5 01       	movw	r30, r10
    201a:	37 fc       	sbrc	r3, 7
    201c:	85 91       	lpm	r24, Z+
    201e:	37 fe       	sbrs	r3, 7
    2020:	81 91       	ld	r24, Z+
    2022:	5f 01       	movw	r10, r30
    2024:	b6 01       	movw	r22, r12
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    202c:	21 10       	cpse	r2, r1
    202e:	2a 94       	dec	r2
    2030:	21 e0       	ldi	r18, 0x01	; 1
    2032:	82 1a       	sub	r8, r18
    2034:	91 08       	sbc	r9, r1
    2036:	81 14       	cp	r8, r1
    2038:	91 04       	cpc	r9, r1
    203a:	71 f7       	brne	.-36     	; 0x2018 <vfprintf+0x1a4>
    203c:	e8 c0       	rjmp	.+464    	; 0x220e <vfprintf+0x39a>
    203e:	84 36       	cpi	r24, 0x64	; 100
    2040:	11 f0       	breq	.+4      	; 0x2046 <vfprintf+0x1d2>
    2042:	89 36       	cpi	r24, 0x69	; 105
    2044:	41 f5       	brne	.+80     	; 0x2096 <vfprintf+0x222>
    2046:	f8 01       	movw	r30, r16
    2048:	37 fe       	sbrs	r3, 7
    204a:	07 c0       	rjmp	.+14     	; 0x205a <vfprintf+0x1e6>
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	0c 5f       	subi	r16, 0xFC	; 252
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	08 c0       	rjmp	.+16     	; 0x206a <vfprintf+0x1f6>
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	07 2e       	mov	r0, r23
    2060:	00 0c       	add	r0, r0
    2062:	88 0b       	sbc	r24, r24
    2064:	99 0b       	sbc	r25, r25
    2066:	0e 5f       	subi	r16, 0xFE	; 254
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	f3 2d       	mov	r31, r3
    206c:	ff 76       	andi	r31, 0x6F	; 111
    206e:	3f 2e       	mov	r3, r31
    2070:	97 ff       	sbrs	r25, 7
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <vfprintf+0x212>
    2074:	90 95       	com	r25
    2076:	80 95       	com	r24
    2078:	70 95       	com	r23
    207a:	61 95       	neg	r22
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8f 4f       	sbci	r24, 0xFF	; 255
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	f0 68       	ori	r31, 0x80	; 128
    2084:	3f 2e       	mov	r3, r31
    2086:	2a e0       	ldi	r18, 0x0A	; 10
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	a3 01       	movw	r20, r6
    208c:	0e 94 6d 11 	call	0x22da	; 0x22da <__ultoa_invert>
    2090:	88 2e       	mov	r8, r24
    2092:	86 18       	sub	r8, r6
    2094:	45 c0       	rjmp	.+138    	; 0x2120 <vfprintf+0x2ac>
    2096:	85 37       	cpi	r24, 0x75	; 117
    2098:	31 f4       	brne	.+12     	; 0x20a6 <vfprintf+0x232>
    209a:	23 2d       	mov	r18, r3
    209c:	2f 7e       	andi	r18, 0xEF	; 239
    209e:	b2 2e       	mov	r11, r18
    20a0:	2a e0       	ldi	r18, 0x0A	; 10
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	25 c0       	rjmp	.+74     	; 0x20f0 <vfprintf+0x27c>
    20a6:	93 2d       	mov	r25, r3
    20a8:	99 7f       	andi	r25, 0xF9	; 249
    20aa:	b9 2e       	mov	r11, r25
    20ac:	8f 36       	cpi	r24, 0x6F	; 111
    20ae:	c1 f0       	breq	.+48     	; 0x20e0 <vfprintf+0x26c>
    20b0:	18 f4       	brcc	.+6      	; 0x20b8 <vfprintf+0x244>
    20b2:	88 35       	cpi	r24, 0x58	; 88
    20b4:	79 f0       	breq	.+30     	; 0x20d4 <vfprintf+0x260>
    20b6:	b5 c0       	rjmp	.+362    	; 0x2222 <vfprintf+0x3ae>
    20b8:	80 37       	cpi	r24, 0x70	; 112
    20ba:	19 f0       	breq	.+6      	; 0x20c2 <vfprintf+0x24e>
    20bc:	88 37       	cpi	r24, 0x78	; 120
    20be:	21 f0       	breq	.+8      	; 0x20c8 <vfprintf+0x254>
    20c0:	b0 c0       	rjmp	.+352    	; 0x2222 <vfprintf+0x3ae>
    20c2:	e9 2f       	mov	r30, r25
    20c4:	e0 61       	ori	r30, 0x10	; 16
    20c6:	be 2e       	mov	r11, r30
    20c8:	b4 fe       	sbrs	r11, 4
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <vfprintf+0x272>
    20cc:	fb 2d       	mov	r31, r11
    20ce:	f4 60       	ori	r31, 0x04	; 4
    20d0:	bf 2e       	mov	r11, r31
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <vfprintf+0x272>
    20d4:	34 fe       	sbrs	r3, 4
    20d6:	0a c0       	rjmp	.+20     	; 0x20ec <vfprintf+0x278>
    20d8:	29 2f       	mov	r18, r25
    20da:	26 60       	ori	r18, 0x06	; 6
    20dc:	b2 2e       	mov	r11, r18
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <vfprintf+0x278>
    20e0:	28 e0       	ldi	r18, 0x08	; 8
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <vfprintf+0x27c>
    20e6:	20 e1       	ldi	r18, 0x10	; 16
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <vfprintf+0x27c>
    20ec:	20 e1       	ldi	r18, 0x10	; 16
    20ee:	32 e0       	ldi	r19, 0x02	; 2
    20f0:	f8 01       	movw	r30, r16
    20f2:	b7 fe       	sbrs	r11, 7
    20f4:	07 c0       	rjmp	.+14     	; 0x2104 <vfprintf+0x290>
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	0c 5f       	subi	r16, 0xFC	; 252
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <vfprintf+0x29c>
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 5f       	subi	r16, 0xFE	; 254
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	a3 01       	movw	r20, r6
    2112:	0e 94 6d 11 	call	0x22da	; 0x22da <__ultoa_invert>
    2116:	88 2e       	mov	r8, r24
    2118:	86 18       	sub	r8, r6
    211a:	fb 2d       	mov	r31, r11
    211c:	ff 77       	andi	r31, 0x7F	; 127
    211e:	3f 2e       	mov	r3, r31
    2120:	36 fe       	sbrs	r3, 6
    2122:	0d c0       	rjmp	.+26     	; 0x213e <vfprintf+0x2ca>
    2124:	23 2d       	mov	r18, r3
    2126:	2e 7f       	andi	r18, 0xFE	; 254
    2128:	a2 2e       	mov	r10, r18
    212a:	89 14       	cp	r8, r9
    212c:	58 f4       	brcc	.+22     	; 0x2144 <vfprintf+0x2d0>
    212e:	34 fe       	sbrs	r3, 4
    2130:	0b c0       	rjmp	.+22     	; 0x2148 <vfprintf+0x2d4>
    2132:	32 fc       	sbrc	r3, 2
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <vfprintf+0x2d4>
    2136:	83 2d       	mov	r24, r3
    2138:	8e 7e       	andi	r24, 0xEE	; 238
    213a:	a8 2e       	mov	r10, r24
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <vfprintf+0x2d4>
    213e:	b8 2c       	mov	r11, r8
    2140:	a3 2c       	mov	r10, r3
    2142:	03 c0       	rjmp	.+6      	; 0x214a <vfprintf+0x2d6>
    2144:	b8 2c       	mov	r11, r8
    2146:	01 c0       	rjmp	.+2      	; 0x214a <vfprintf+0x2d6>
    2148:	b9 2c       	mov	r11, r9
    214a:	a4 fe       	sbrs	r10, 4
    214c:	0f c0       	rjmp	.+30     	; 0x216c <vfprintf+0x2f8>
    214e:	fe 01       	movw	r30, r28
    2150:	e8 0d       	add	r30, r8
    2152:	f1 1d       	adc	r31, r1
    2154:	80 81       	ld	r24, Z
    2156:	80 33       	cpi	r24, 0x30	; 48
    2158:	21 f4       	brne	.+8      	; 0x2162 <vfprintf+0x2ee>
    215a:	9a 2d       	mov	r25, r10
    215c:	99 7e       	andi	r25, 0xE9	; 233
    215e:	a9 2e       	mov	r10, r25
    2160:	09 c0       	rjmp	.+18     	; 0x2174 <vfprintf+0x300>
    2162:	a2 fe       	sbrs	r10, 2
    2164:	06 c0       	rjmp	.+12     	; 0x2172 <vfprintf+0x2fe>
    2166:	b3 94       	inc	r11
    2168:	b3 94       	inc	r11
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <vfprintf+0x300>
    216c:	8a 2d       	mov	r24, r10
    216e:	86 78       	andi	r24, 0x86	; 134
    2170:	09 f0       	breq	.+2      	; 0x2174 <vfprintf+0x300>
    2172:	b3 94       	inc	r11
    2174:	a3 fc       	sbrc	r10, 3
    2176:	11 c0       	rjmp	.+34     	; 0x219a <vfprintf+0x326>
    2178:	a0 fe       	sbrs	r10, 0
    217a:	06 c0       	rjmp	.+12     	; 0x2188 <vfprintf+0x314>
    217c:	b2 14       	cp	r11, r2
    217e:	88 f4       	brcc	.+34     	; 0x21a2 <vfprintf+0x32e>
    2180:	28 0c       	add	r2, r8
    2182:	92 2c       	mov	r9, r2
    2184:	9b 18       	sub	r9, r11
    2186:	0e c0       	rjmp	.+28     	; 0x21a4 <vfprintf+0x330>
    2188:	b2 14       	cp	r11, r2
    218a:	60 f4       	brcc	.+24     	; 0x21a4 <vfprintf+0x330>
    218c:	b6 01       	movw	r22, r12
    218e:	80 e2       	ldi	r24, 0x20	; 32
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    2196:	b3 94       	inc	r11
    2198:	f7 cf       	rjmp	.-18     	; 0x2188 <vfprintf+0x314>
    219a:	b2 14       	cp	r11, r2
    219c:	18 f4       	brcc	.+6      	; 0x21a4 <vfprintf+0x330>
    219e:	2b 18       	sub	r2, r11
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <vfprintf+0x332>
    21a2:	98 2c       	mov	r9, r8
    21a4:	21 2c       	mov	r2, r1
    21a6:	a4 fe       	sbrs	r10, 4
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <vfprintf+0x356>
    21aa:	b6 01       	movw	r22, r12
    21ac:	80 e3       	ldi	r24, 0x30	; 48
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    21b4:	a2 fe       	sbrs	r10, 2
    21b6:	17 c0       	rjmp	.+46     	; 0x21e6 <vfprintf+0x372>
    21b8:	a1 fc       	sbrc	r10, 1
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <vfprintf+0x34e>
    21bc:	88 e7       	ldi	r24, 0x78	; 120
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <vfprintf+0x352>
    21c2:	88 e5       	ldi	r24, 0x58	; 88
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b6 01       	movw	r22, r12
    21c8:	0c c0       	rjmp	.+24     	; 0x21e2 <vfprintf+0x36e>
    21ca:	8a 2d       	mov	r24, r10
    21cc:	86 78       	andi	r24, 0x86	; 134
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <vfprintf+0x372>
    21d0:	a1 fe       	sbrs	r10, 1
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0x364>
    21d4:	8b e2       	ldi	r24, 0x2B	; 43
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <vfprintf+0x366>
    21d8:	80 e2       	ldi	r24, 0x20	; 32
    21da:	a7 fc       	sbrc	r10, 7
    21dc:	8d e2       	ldi	r24, 0x2D	; 45
    21de:	b6 01       	movw	r22, r12
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    21e6:	89 14       	cp	r8, r9
    21e8:	38 f4       	brcc	.+14     	; 0x21f8 <vfprintf+0x384>
    21ea:	b6 01       	movw	r22, r12
    21ec:	80 e3       	ldi	r24, 0x30	; 48
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    21f4:	9a 94       	dec	r9
    21f6:	f7 cf       	rjmp	.-18     	; 0x21e6 <vfprintf+0x372>
    21f8:	8a 94       	dec	r8
    21fa:	f3 01       	movw	r30, r6
    21fc:	e8 0d       	add	r30, r8
    21fe:	f1 1d       	adc	r31, r1
    2200:	80 81       	ld	r24, Z
    2202:	b6 01       	movw	r22, r12
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    220a:	81 10       	cpse	r8, r1
    220c:	f5 cf       	rjmp	.-22     	; 0x21f8 <vfprintf+0x384>
    220e:	22 20       	and	r2, r2
    2210:	09 f4       	brne	.+2      	; 0x2214 <vfprintf+0x3a0>
    2212:	42 ce       	rjmp	.-892    	; 0x1e98 <vfprintf+0x24>
    2214:	b6 01       	movw	r22, r12
    2216:	80 e2       	ldi	r24, 0x20	; 32
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 31 11 	call	0x2262	; 0x2262 <fputc>
    221e:	2a 94       	dec	r2
    2220:	f6 cf       	rjmp	.-20     	; 0x220e <vfprintf+0x39a>
    2222:	f6 01       	movw	r30, r12
    2224:	86 81       	ldd	r24, Z+6	; 0x06
    2226:	97 81       	ldd	r25, Z+7	; 0x07
    2228:	02 c0       	rjmp	.+4      	; 0x222e <vfprintf+0x3ba>
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	9f ef       	ldi	r25, 0xFF	; 255
    222e:	2b 96       	adiw	r28, 0x0b	; 11
    2230:	e2 e1       	ldi	r30, 0x12	; 18
    2232:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__>

00002236 <strnlen_P>:
    2236:	fc 01       	movw	r30, r24
    2238:	05 90       	lpm	r0, Z+
    223a:	61 50       	subi	r22, 0x01	; 1
    223c:	70 40       	sbci	r23, 0x00	; 0
    223e:	01 10       	cpse	r0, r1
    2240:	d8 f7       	brcc	.-10     	; 0x2238 <strnlen_P+0x2>
    2242:	80 95       	com	r24
    2244:	90 95       	com	r25
    2246:	8e 0f       	add	r24, r30
    2248:	9f 1f       	adc	r25, r31
    224a:	08 95       	ret

0000224c <strnlen>:
    224c:	fc 01       	movw	r30, r24
    224e:	61 50       	subi	r22, 0x01	; 1
    2250:	70 40       	sbci	r23, 0x00	; 0
    2252:	01 90       	ld	r0, Z+
    2254:	01 10       	cpse	r0, r1
    2256:	d8 f7       	brcc	.-10     	; 0x224e <strnlen+0x2>
    2258:	80 95       	com	r24
    225a:	90 95       	com	r25
    225c:	8e 0f       	add	r24, r30
    225e:	9f 1f       	adc	r25, r31
    2260:	08 95       	ret

00002262 <fputc>:
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	fb 01       	movw	r30, r22
    226c:	23 81       	ldd	r18, Z+3	; 0x03
    226e:	21 fd       	sbrc	r18, 1
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <fputc+0x16>
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	2c c0       	rjmp	.+88     	; 0x22d0 <fputc+0x6e>
    2278:	22 ff       	sbrs	r18, 2
    227a:	16 c0       	rjmp	.+44     	; 0x22a8 <fputc+0x46>
    227c:	46 81       	ldd	r20, Z+6	; 0x06
    227e:	57 81       	ldd	r21, Z+7	; 0x07
    2280:	24 81       	ldd	r18, Z+4	; 0x04
    2282:	35 81       	ldd	r19, Z+5	; 0x05
    2284:	42 17       	cp	r20, r18
    2286:	53 07       	cpc	r21, r19
    2288:	44 f4       	brge	.+16     	; 0x229a <fputc+0x38>
    228a:	a0 81       	ld	r26, Z
    228c:	b1 81       	ldd	r27, Z+1	; 0x01
    228e:	9d 01       	movw	r18, r26
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	31 83       	std	Z+1, r19	; 0x01
    2296:	20 83       	st	Z, r18
    2298:	8c 93       	st	X, r24
    229a:	26 81       	ldd	r18, Z+6	; 0x06
    229c:	37 81       	ldd	r19, Z+7	; 0x07
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	37 83       	std	Z+7, r19	; 0x07
    22a4:	26 83       	std	Z+6, r18	; 0x06
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <fputc+0x6e>
    22a8:	8b 01       	movw	r16, r22
    22aa:	ec 01       	movw	r28, r24
    22ac:	fb 01       	movw	r30, r22
    22ae:	00 84       	ldd	r0, Z+8	; 0x08
    22b0:	f1 85       	ldd	r31, Z+9	; 0x09
    22b2:	e0 2d       	mov	r30, r0
    22b4:	09 95       	icall
    22b6:	89 2b       	or	r24, r25
    22b8:	e1 f6       	brne	.-72     	; 0x2272 <fputc+0x10>
    22ba:	d8 01       	movw	r26, r16
    22bc:	16 96       	adiw	r26, 0x06	; 6
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	17 97       	sbiw	r26, 0x07	; 7
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	17 96       	adiw	r26, 0x07	; 7
    22c8:	9c 93       	st	X, r25
    22ca:	8e 93       	st	-X, r24
    22cc:	16 97       	sbiw	r26, 0x06	; 6
    22ce:	ce 01       	movw	r24, r28
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	08 95       	ret

000022da <__ultoa_invert>:
    22da:	fa 01       	movw	r30, r20
    22dc:	aa 27       	eor	r26, r26
    22de:	28 30       	cpi	r18, 0x08	; 8
    22e0:	51 f1       	breq	.+84     	; 0x2336 <__ultoa_invert+0x5c>
    22e2:	20 31       	cpi	r18, 0x10	; 16
    22e4:	81 f1       	breq	.+96     	; 0x2346 <__ultoa_invert+0x6c>
    22e6:	e8 94       	clt
    22e8:	6f 93       	push	r22
    22ea:	6e 7f       	andi	r22, 0xFE	; 254
    22ec:	6e 5f       	subi	r22, 0xFE	; 254
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	af 4f       	sbci	r26, 0xFF	; 255
    22f6:	b1 e0       	ldi	r27, 0x01	; 1
    22f8:	3e d0       	rcall	.+124    	; 0x2376 <__ultoa_invert+0x9c>
    22fa:	b4 e0       	ldi	r27, 0x04	; 4
    22fc:	3c d0       	rcall	.+120    	; 0x2376 <__ultoa_invert+0x9c>
    22fe:	67 0f       	add	r22, r23
    2300:	78 1f       	adc	r23, r24
    2302:	89 1f       	adc	r24, r25
    2304:	9a 1f       	adc	r25, r26
    2306:	a1 1d       	adc	r26, r1
    2308:	68 0f       	add	r22, r24
    230a:	79 1f       	adc	r23, r25
    230c:	8a 1f       	adc	r24, r26
    230e:	91 1d       	adc	r25, r1
    2310:	a1 1d       	adc	r26, r1
    2312:	6a 0f       	add	r22, r26
    2314:	71 1d       	adc	r23, r1
    2316:	81 1d       	adc	r24, r1
    2318:	91 1d       	adc	r25, r1
    231a:	a1 1d       	adc	r26, r1
    231c:	20 d0       	rcall	.+64     	; 0x235e <__ultoa_invert+0x84>
    231e:	09 f4       	brne	.+2      	; 0x2322 <__ultoa_invert+0x48>
    2320:	68 94       	set
    2322:	3f 91       	pop	r19
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	26 9f       	mul	r18, r22
    2328:	11 24       	eor	r1, r1
    232a:	30 19       	sub	r19, r0
    232c:	30 5d       	subi	r19, 0xD0	; 208
    232e:	31 93       	st	Z+, r19
    2330:	de f6       	brtc	.-74     	; 0x22e8 <__ultoa_invert+0xe>
    2332:	cf 01       	movw	r24, r30
    2334:	08 95       	ret
    2336:	46 2f       	mov	r20, r22
    2338:	47 70       	andi	r20, 0x07	; 7
    233a:	40 5d       	subi	r20, 0xD0	; 208
    233c:	41 93       	st	Z+, r20
    233e:	b3 e0       	ldi	r27, 0x03	; 3
    2340:	0f d0       	rcall	.+30     	; 0x2360 <__ultoa_invert+0x86>
    2342:	c9 f7       	brne	.-14     	; 0x2336 <__ultoa_invert+0x5c>
    2344:	f6 cf       	rjmp	.-20     	; 0x2332 <__ultoa_invert+0x58>
    2346:	46 2f       	mov	r20, r22
    2348:	4f 70       	andi	r20, 0x0F	; 15
    234a:	40 5d       	subi	r20, 0xD0	; 208
    234c:	4a 33       	cpi	r20, 0x3A	; 58
    234e:	18 f0       	brcs	.+6      	; 0x2356 <__ultoa_invert+0x7c>
    2350:	49 5d       	subi	r20, 0xD9	; 217
    2352:	31 fd       	sbrc	r19, 1
    2354:	40 52       	subi	r20, 0x20	; 32
    2356:	41 93       	st	Z+, r20
    2358:	02 d0       	rcall	.+4      	; 0x235e <__ultoa_invert+0x84>
    235a:	a9 f7       	brne	.-22     	; 0x2346 <__ultoa_invert+0x6c>
    235c:	ea cf       	rjmp	.-44     	; 0x2332 <__ultoa_invert+0x58>
    235e:	b4 e0       	ldi	r27, 0x04	; 4
    2360:	a6 95       	lsr	r26
    2362:	97 95       	ror	r25
    2364:	87 95       	ror	r24
    2366:	77 95       	ror	r23
    2368:	67 95       	ror	r22
    236a:	ba 95       	dec	r27
    236c:	c9 f7       	brne	.-14     	; 0x2360 <__ultoa_invert+0x86>
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	61 05       	cpc	r22, r1
    2372:	71 05       	cpc	r23, r1
    2374:	08 95       	ret
    2376:	9b 01       	movw	r18, r22
    2378:	ac 01       	movw	r20, r24
    237a:	0a 2e       	mov	r0, r26
    237c:	06 94       	lsr	r0
    237e:	57 95       	ror	r21
    2380:	47 95       	ror	r20
    2382:	37 95       	ror	r19
    2384:	27 95       	ror	r18
    2386:	ba 95       	dec	r27
    2388:	c9 f7       	brne	.-14     	; 0x237c <__ultoa_invert+0xa2>
    238a:	62 0f       	add	r22, r18
    238c:	73 1f       	adc	r23, r19
    238e:	84 1f       	adc	r24, r20
    2390:	95 1f       	adc	r25, r21
    2392:	a0 1d       	adc	r26, r0
    2394:	08 95       	ret

00002396 <__prologue_saves__>:
    2396:	2f 92       	push	r2
    2398:	3f 92       	push	r3
    239a:	4f 92       	push	r4
    239c:	5f 92       	push	r5
    239e:	6f 92       	push	r6
    23a0:	7f 92       	push	r7
    23a2:	8f 92       	push	r8
    23a4:	9f 92       	push	r9
    23a6:	af 92       	push	r10
    23a8:	bf 92       	push	r11
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	ca 1b       	sub	r28, r26
    23c0:	db 0b       	sbc	r29, r27
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	09 94       	ijmp

000023ce <__epilogue_restores__>:
    23ce:	2a 88       	ldd	r2, Y+18	; 0x12
    23d0:	39 88       	ldd	r3, Y+17	; 0x11
    23d2:	48 88       	ldd	r4, Y+16	; 0x10
    23d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23da:	8c 84       	ldd	r8, Y+12	; 0x0c
    23dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23de:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e0:	b9 84       	ldd	r11, Y+9	; 0x09
    23e2:	c8 84       	ldd	r12, Y+8	; 0x08
    23e4:	df 80       	ldd	r13, Y+7	; 0x07
    23e6:	ee 80       	ldd	r14, Y+6	; 0x06
    23e8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ea:	0c 81       	ldd	r16, Y+4	; 0x04
    23ec:	1b 81       	ldd	r17, Y+3	; 0x03
    23ee:	aa 81       	ldd	r26, Y+2	; 0x02
    23f0:	b9 81       	ldd	r27, Y+1	; 0x01
    23f2:	ce 0f       	add	r28, r30
    23f4:	d1 1d       	adc	r29, r1
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	ed 01       	movw	r28, r26
    2402:	08 95       	ret

00002404 <_exit>:
    2404:	f8 94       	cli

00002406 <__stop_program>:
    2406:	ff cf       	rjmp	.-2      	; 0x2406 <__stop_program>
